// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: onnx.proto

#ifndef PROTOBUF_onnx_2eproto__INCLUDED
#define PROTOBUF_onnx_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace onnx {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_onnx_2eproto();
void protobuf_AssignDesc_onnx_2eproto();
void protobuf_ShutdownFile_onnx_2eproto();

class AttributeProto;
class ValueInfoProto;
class NodeProto;
class ModelProto;
class StringStringEntryProto;
class TensorAnnotation;
class GraphProto;
class TensorProto;
class TensorProto_Segment;
class TensorShapeProto;
class TensorShapeProto_Dimension;
class TypeProto;
class TypeProto_Tensor;
class OperatorSetIdProto;

enum AttributeProto_AttributeType {
  AttributeProto_AttributeType_UNDEFINED = 0,
  AttributeProto_AttributeType_FLOAT = 1,
  AttributeProto_AttributeType_INT = 2,
  AttributeProto_AttributeType_STRING = 3,
  AttributeProto_AttributeType_TENSOR = 4,
  AttributeProto_AttributeType_GRAPH = 5,
  AttributeProto_AttributeType_FLOATS = 6,
  AttributeProto_AttributeType_INTS = 7,
  AttributeProto_AttributeType_STRINGS = 8,
  AttributeProto_AttributeType_TENSORS = 9,
  AttributeProto_AttributeType_GRAPHS = 10
};
bool AttributeProto_AttributeType_IsValid(int value);
const AttributeProto_AttributeType AttributeProto_AttributeType_AttributeType_MIN = AttributeProto_AttributeType_UNDEFINED;
const AttributeProto_AttributeType AttributeProto_AttributeType_AttributeType_MAX = AttributeProto_AttributeType_GRAPHS;
const int AttributeProto_AttributeType_AttributeType_ARRAYSIZE = AttributeProto_AttributeType_AttributeType_MAX + 1;

const ::google::protobuf::EnumDescriptor* AttributeProto_AttributeType_descriptor();
inline const ::std::string& AttributeProto_AttributeType_Name(AttributeProto_AttributeType value) {
  return ::google::protobuf::internal::NameOfEnum(
    AttributeProto_AttributeType_descriptor(), value);
}
inline bool AttributeProto_AttributeType_Parse(
    const ::std::string& name, AttributeProto_AttributeType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<AttributeProto_AttributeType>(
    AttributeProto_AttributeType_descriptor(), name, value);
}
enum TensorProto_DataType {
  TensorProto_DataType_UNDEFINED = 0,
  TensorProto_DataType_FLOAT = 1,
  TensorProto_DataType_UINT8 = 2,
  TensorProto_DataType_INT8 = 3,
  TensorProto_DataType_UINT16 = 4,
  TensorProto_DataType_INT16 = 5,
  TensorProto_DataType_INT32 = 6,
  TensorProto_DataType_INT64 = 7,
  TensorProto_DataType_STRING = 8,
  TensorProto_DataType_BOOL = 9,
  TensorProto_DataType_FLOAT16 = 10,
  TensorProto_DataType_DOUBLE = 11,
  TensorProto_DataType_UINT32 = 12,
  TensorProto_DataType_UINT64 = 13,
  TensorProto_DataType_COMPLEX64 = 14,
  TensorProto_DataType_COMPLEX128 = 15,
  TensorProto_DataType_BFLOAT16 = 16
};
bool TensorProto_DataType_IsValid(int value);
const TensorProto_DataType TensorProto_DataType_DataType_MIN = TensorProto_DataType_UNDEFINED;
const TensorProto_DataType TensorProto_DataType_DataType_MAX = TensorProto_DataType_BFLOAT16;
const int TensorProto_DataType_DataType_ARRAYSIZE = TensorProto_DataType_DataType_MAX + 1;

const ::google::protobuf::EnumDescriptor* TensorProto_DataType_descriptor();
inline const ::std::string& TensorProto_DataType_Name(TensorProto_DataType value) {
  return ::google::protobuf::internal::NameOfEnum(
    TensorProto_DataType_descriptor(), value);
}
inline bool TensorProto_DataType_Parse(
    const ::std::string& name, TensorProto_DataType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TensorProto_DataType>(
    TensorProto_DataType_descriptor(), name, value);
}
enum TensorProto_DataLocation {
  TensorProto_DataLocation_DEFAULT = 0,
  TensorProto_DataLocation_EXTERNAL = 1
};
bool TensorProto_DataLocation_IsValid(int value);
const TensorProto_DataLocation TensorProto_DataLocation_DataLocation_MIN = TensorProto_DataLocation_DEFAULT;
const TensorProto_DataLocation TensorProto_DataLocation_DataLocation_MAX = TensorProto_DataLocation_EXTERNAL;
const int TensorProto_DataLocation_DataLocation_ARRAYSIZE = TensorProto_DataLocation_DataLocation_MAX + 1;

const ::google::protobuf::EnumDescriptor* TensorProto_DataLocation_descriptor();
inline const ::std::string& TensorProto_DataLocation_Name(TensorProto_DataLocation value) {
  return ::google::protobuf::internal::NameOfEnum(
    TensorProto_DataLocation_descriptor(), value);
}
inline bool TensorProto_DataLocation_Parse(
    const ::std::string& name, TensorProto_DataLocation* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TensorProto_DataLocation>(
    TensorProto_DataLocation_descriptor(), name, value);
}
enum Version {
  _START_VERSION = 0,
  IR_VERSION_2017_10_10 = 1,
  IR_VERSION_2017_10_30 = 2,
  IR_VERSION_2017_11_3 = 3,
  IR_VERSION_2019_1_22 = 4,
  IR_VERSION = 5
};
bool Version_IsValid(int value);
const Version Version_MIN = _START_VERSION;
const Version Version_MAX = IR_VERSION;
const int Version_ARRAYSIZE = Version_MAX + 1;

const ::google::protobuf::EnumDescriptor* Version_descriptor();
inline const ::std::string& Version_Name(Version value) {
  return ::google::protobuf::internal::NameOfEnum(
    Version_descriptor(), value);
}
inline bool Version_Parse(
    const ::std::string& name, Version* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Version>(
    Version_descriptor(), name, value);
}
// ===================================================================

class AttributeProto : public ::google::protobuf::Message {
 public:
  AttributeProto();
  virtual ~AttributeProto();

  AttributeProto(const AttributeProto& from);

  inline AttributeProto& operator=(const AttributeProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AttributeProto& default_instance();

  void Swap(AttributeProto* other);

  // implements Message ----------------------------------------------

  AttributeProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AttributeProto& from);
  void MergeFrom(const AttributeProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef AttributeProto_AttributeType AttributeType;
  static const AttributeType UNDEFINED = AttributeProto_AttributeType_UNDEFINED;
  static const AttributeType FLOAT = AttributeProto_AttributeType_FLOAT;
  static const AttributeType INT = AttributeProto_AttributeType_INT;
  static const AttributeType STRING = AttributeProto_AttributeType_STRING;
  static const AttributeType TENSOR = AttributeProto_AttributeType_TENSOR;
  static const AttributeType GRAPH = AttributeProto_AttributeType_GRAPH;
  static const AttributeType FLOATS = AttributeProto_AttributeType_FLOATS;
  static const AttributeType INTS = AttributeProto_AttributeType_INTS;
  static const AttributeType STRINGS = AttributeProto_AttributeType_STRINGS;
  static const AttributeType TENSORS = AttributeProto_AttributeType_TENSORS;
  static const AttributeType GRAPHS = AttributeProto_AttributeType_GRAPHS;
  static inline bool AttributeType_IsValid(int value) {
    return AttributeProto_AttributeType_IsValid(value);
  }
  static const AttributeType AttributeType_MIN =
    AttributeProto_AttributeType_AttributeType_MIN;
  static const AttributeType AttributeType_MAX =
    AttributeProto_AttributeType_AttributeType_MAX;
  static const int AttributeType_ARRAYSIZE =
    AttributeProto_AttributeType_AttributeType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  AttributeType_descriptor() {
    return AttributeProto_AttributeType_descriptor();
  }
  static inline const ::std::string& AttributeType_Name(AttributeType value) {
    return AttributeProto_AttributeType_Name(value);
  }
  static inline bool AttributeType_Parse(const ::std::string& name,
      AttributeType* value) {
    return AttributeProto_AttributeType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional string ref_attr_name = 21;
  inline bool has_ref_attr_name() const;
  inline void clear_ref_attr_name();
  static const int kRefAttrNameFieldNumber = 21;
  inline const ::std::string& ref_attr_name() const;
  inline void set_ref_attr_name(const ::std::string& value);
  inline void set_ref_attr_name(const char* value);
  inline void set_ref_attr_name(const char* value, size_t size);
  inline ::std::string* mutable_ref_attr_name();
  inline ::std::string* release_ref_attr_name();
  inline void set_allocated_ref_attr_name(::std::string* ref_attr_name);

  // optional string doc_string = 13;
  inline bool has_doc_string() const;
  inline void clear_doc_string();
  static const int kDocStringFieldNumber = 13;
  inline const ::std::string& doc_string() const;
  inline void set_doc_string(const ::std::string& value);
  inline void set_doc_string(const char* value);
  inline void set_doc_string(const char* value, size_t size);
  inline ::std::string* mutable_doc_string();
  inline ::std::string* release_doc_string();
  inline void set_allocated_doc_string(::std::string* doc_string);

  // optional .onnx.AttributeProto.AttributeType type = 20;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 20;
  inline ::onnx::AttributeProto_AttributeType type() const;
  inline void set_type(::onnx::AttributeProto_AttributeType value);

  // optional float f = 2;
  inline bool has_f() const;
  inline void clear_f();
  static const int kFFieldNumber = 2;
  inline float f() const;
  inline void set_f(float value);

  // optional int64 i = 3;
  inline bool has_i() const;
  inline void clear_i();
  static const int kIFieldNumber = 3;
  inline ::google::protobuf::int64 i() const;
  inline void set_i(::google::protobuf::int64 value);

  // optional bytes s = 4;
  inline bool has_s() const;
  inline void clear_s();
  static const int kSFieldNumber = 4;
  inline const ::std::string& s() const;
  inline void set_s(const ::std::string& value);
  inline void set_s(const char* value);
  inline void set_s(const void* value, size_t size);
  inline ::std::string* mutable_s();
  inline ::std::string* release_s();
  inline void set_allocated_s(::std::string* s);

  // optional .onnx.TensorProto t = 5;
  inline bool has_t() const;
  inline void clear_t();
  static const int kTFieldNumber = 5;
  inline const ::onnx::TensorProto& t() const;
  inline ::onnx::TensorProto* mutable_t();
  inline ::onnx::TensorProto* release_t();
  inline void set_allocated_t(::onnx::TensorProto* t);

  // optional .onnx.GraphProto g = 6;
  inline bool has_g() const;
  inline void clear_g();
  static const int kGFieldNumber = 6;
  inline const ::onnx::GraphProto& g() const;
  inline ::onnx::GraphProto* mutable_g();
  inline ::onnx::GraphProto* release_g();
  inline void set_allocated_g(::onnx::GraphProto* g);

  // repeated float floats = 7;
  inline int floats_size() const;
  inline void clear_floats();
  static const int kFloatsFieldNumber = 7;
  inline float floats(int index) const;
  inline void set_floats(int index, float value);
  inline void add_floats(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      floats() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_floats();

  // repeated int64 ints = 8;
  inline int ints_size() const;
  inline void clear_ints();
  static const int kIntsFieldNumber = 8;
  inline ::google::protobuf::int64 ints(int index) const;
  inline void set_ints(int index, ::google::protobuf::int64 value);
  inline void add_ints(::google::protobuf::int64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      ints() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_ints();

  // repeated bytes strings = 9;
  inline int strings_size() const;
  inline void clear_strings();
  static const int kStringsFieldNumber = 9;
  inline const ::std::string& strings(int index) const;
  inline ::std::string* mutable_strings(int index);
  inline void set_strings(int index, const ::std::string& value);
  inline void set_strings(int index, const char* value);
  inline void set_strings(int index, const void* value, size_t size);
  inline ::std::string* add_strings();
  inline void add_strings(const ::std::string& value);
  inline void add_strings(const char* value);
  inline void add_strings(const void* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& strings() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_strings();

  // repeated .onnx.TensorProto tensors = 10;
  inline int tensors_size() const;
  inline void clear_tensors();
  static const int kTensorsFieldNumber = 10;
  inline const ::onnx::TensorProto& tensors(int index) const;
  inline ::onnx::TensorProto* mutable_tensors(int index);
  inline ::onnx::TensorProto* add_tensors();
  inline const ::google::protobuf::RepeatedPtrField< ::onnx::TensorProto >&
      tensors() const;
  inline ::google::protobuf::RepeatedPtrField< ::onnx::TensorProto >*
      mutable_tensors();

  // repeated .onnx.GraphProto graphs = 11;
  inline int graphs_size() const;
  inline void clear_graphs();
  static const int kGraphsFieldNumber = 11;
  inline const ::onnx::GraphProto& graphs(int index) const;
  inline ::onnx::GraphProto* mutable_graphs(int index);
  inline ::onnx::GraphProto* add_graphs();
  inline const ::google::protobuf::RepeatedPtrField< ::onnx::GraphProto >&
      graphs() const;
  inline ::google::protobuf::RepeatedPtrField< ::onnx::GraphProto >*
      mutable_graphs();

  // @@protoc_insertion_point(class_scope:onnx.AttributeProto)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_ref_attr_name();
  inline void clear_has_ref_attr_name();
  inline void set_has_doc_string();
  inline void clear_has_doc_string();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_f();
  inline void clear_has_f();
  inline void set_has_i();
  inline void clear_has_i();
  inline void set_has_s();
  inline void clear_has_s();
  inline void set_has_t();
  inline void clear_has_t();
  inline void set_has_g();
  inline void clear_has_g();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* name_;
  ::std::string* ref_attr_name_;
  ::std::string* doc_string_;
  int type_;
  float f_;
  ::google::protobuf::int64 i_;
  ::std::string* s_;
  ::onnx::TensorProto* t_;
  ::onnx::GraphProto* g_;
  ::google::protobuf::RepeatedField< float > floats_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > ints_;
  ::google::protobuf::RepeatedPtrField< ::std::string> strings_;
  ::google::protobuf::RepeatedPtrField< ::onnx::TensorProto > tensors_;
  ::google::protobuf::RepeatedPtrField< ::onnx::GraphProto > graphs_;
  friend void  protobuf_AddDesc_onnx_2eproto();
  friend void protobuf_AssignDesc_onnx_2eproto();
  friend void protobuf_ShutdownFile_onnx_2eproto();

  void InitAsDefaultInstance();
  static AttributeProto* default_instance_;
};
// -------------------------------------------------------------------

class ValueInfoProto : public ::google::protobuf::Message {
 public:
  ValueInfoProto();
  virtual ~ValueInfoProto();

  ValueInfoProto(const ValueInfoProto& from);

  inline ValueInfoProto& operator=(const ValueInfoProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ValueInfoProto& default_instance();

  void Swap(ValueInfoProto* other);

  // implements Message ----------------------------------------------

  ValueInfoProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ValueInfoProto& from);
  void MergeFrom(const ValueInfoProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional .onnx.TypeProto type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline const ::onnx::TypeProto& type() const;
  inline ::onnx::TypeProto* mutable_type();
  inline ::onnx::TypeProto* release_type();
  inline void set_allocated_type(::onnx::TypeProto* type);

  // optional string doc_string = 3;
  inline bool has_doc_string() const;
  inline void clear_doc_string();
  static const int kDocStringFieldNumber = 3;
  inline const ::std::string& doc_string() const;
  inline void set_doc_string(const ::std::string& value);
  inline void set_doc_string(const char* value);
  inline void set_doc_string(const char* value, size_t size);
  inline ::std::string* mutable_doc_string();
  inline ::std::string* release_doc_string();
  inline void set_allocated_doc_string(::std::string* doc_string);

  // @@protoc_insertion_point(class_scope:onnx.ValueInfoProto)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_doc_string();
  inline void clear_has_doc_string();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* name_;
  ::onnx::TypeProto* type_;
  ::std::string* doc_string_;
  friend void  protobuf_AddDesc_onnx_2eproto();
  friend void protobuf_AssignDesc_onnx_2eproto();
  friend void protobuf_ShutdownFile_onnx_2eproto();

  void InitAsDefaultInstance();
  static ValueInfoProto* default_instance_;
};
// -------------------------------------------------------------------

class NodeProto : public ::google::protobuf::Message {
 public:
  NodeProto();
  virtual ~NodeProto();

  NodeProto(const NodeProto& from);

  inline NodeProto& operator=(const NodeProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NodeProto& default_instance();

  void Swap(NodeProto* other);

  // implements Message ----------------------------------------------

  NodeProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NodeProto& from);
  void MergeFrom(const NodeProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string input = 1;
  inline int input_size() const;
  inline void clear_input();
  static const int kInputFieldNumber = 1;
  inline const ::std::string& input(int index) const;
  inline ::std::string* mutable_input(int index);
  inline void set_input(int index, const ::std::string& value);
  inline void set_input(int index, const char* value);
  inline void set_input(int index, const char* value, size_t size);
  inline ::std::string* add_input();
  inline void add_input(const ::std::string& value);
  inline void add_input(const char* value);
  inline void add_input(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& input() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_input();

  // repeated string output = 2;
  inline int output_size() const;
  inline void clear_output();
  static const int kOutputFieldNumber = 2;
  inline const ::std::string& output(int index) const;
  inline ::std::string* mutable_output(int index);
  inline void set_output(int index, const ::std::string& value);
  inline void set_output(int index, const char* value);
  inline void set_output(int index, const char* value, size_t size);
  inline ::std::string* add_output();
  inline void add_output(const ::std::string& value);
  inline void add_output(const char* value);
  inline void add_output(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& output() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_output();

  // optional string name = 3;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 3;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional string op_type = 4;
  inline bool has_op_type() const;
  inline void clear_op_type();
  static const int kOpTypeFieldNumber = 4;
  inline const ::std::string& op_type() const;
  inline void set_op_type(const ::std::string& value);
  inline void set_op_type(const char* value);
  inline void set_op_type(const char* value, size_t size);
  inline ::std::string* mutable_op_type();
  inline ::std::string* release_op_type();
  inline void set_allocated_op_type(::std::string* op_type);

  // optional string domain = 7;
  inline bool has_domain() const;
  inline void clear_domain();
  static const int kDomainFieldNumber = 7;
  inline const ::std::string& domain() const;
  inline void set_domain(const ::std::string& value);
  inline void set_domain(const char* value);
  inline void set_domain(const char* value, size_t size);
  inline ::std::string* mutable_domain();
  inline ::std::string* release_domain();
  inline void set_allocated_domain(::std::string* domain);

  // repeated .onnx.AttributeProto attribute = 5;
  inline int attribute_size() const;
  inline void clear_attribute();
  static const int kAttributeFieldNumber = 5;
  inline const ::onnx::AttributeProto& attribute(int index) const;
  inline ::onnx::AttributeProto* mutable_attribute(int index);
  inline ::onnx::AttributeProto* add_attribute();
  inline const ::google::protobuf::RepeatedPtrField< ::onnx::AttributeProto >&
      attribute() const;
  inline ::google::protobuf::RepeatedPtrField< ::onnx::AttributeProto >*
      mutable_attribute();

  // optional string doc_string = 6;
  inline bool has_doc_string() const;
  inline void clear_doc_string();
  static const int kDocStringFieldNumber = 6;
  inline const ::std::string& doc_string() const;
  inline void set_doc_string(const ::std::string& value);
  inline void set_doc_string(const char* value);
  inline void set_doc_string(const char* value, size_t size);
  inline ::std::string* mutable_doc_string();
  inline ::std::string* release_doc_string();
  inline void set_allocated_doc_string(::std::string* doc_string);

  // @@protoc_insertion_point(class_scope:onnx.NodeProto)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_op_type();
  inline void clear_has_op_type();
  inline void set_has_domain();
  inline void clear_has_domain();
  inline void set_has_doc_string();
  inline void clear_has_doc_string();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> input_;
  ::google::protobuf::RepeatedPtrField< ::std::string> output_;
  ::std::string* name_;
  ::std::string* op_type_;
  ::std::string* domain_;
  ::google::protobuf::RepeatedPtrField< ::onnx::AttributeProto > attribute_;
  ::std::string* doc_string_;
  friend void  protobuf_AddDesc_onnx_2eproto();
  friend void protobuf_AssignDesc_onnx_2eproto();
  friend void protobuf_ShutdownFile_onnx_2eproto();

  void InitAsDefaultInstance();
  static NodeProto* default_instance_;
};
// -------------------------------------------------------------------

class ModelProto : public ::google::protobuf::Message {
 public:
  ModelProto();
  virtual ~ModelProto();

  ModelProto(const ModelProto& from);

  inline ModelProto& operator=(const ModelProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ModelProto& default_instance();

  void Swap(ModelProto* other);

  // implements Message ----------------------------------------------

  ModelProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ModelProto& from);
  void MergeFrom(const ModelProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 ir_version = 1;
  inline bool has_ir_version() const;
  inline void clear_ir_version();
  static const int kIrVersionFieldNumber = 1;
  inline ::google::protobuf::int64 ir_version() const;
  inline void set_ir_version(::google::protobuf::int64 value);

  // repeated .onnx.OperatorSetIdProto opset_import = 8;
  inline int opset_import_size() const;
  inline void clear_opset_import();
  static const int kOpsetImportFieldNumber = 8;
  inline const ::onnx::OperatorSetIdProto& opset_import(int index) const;
  inline ::onnx::OperatorSetIdProto* mutable_opset_import(int index);
  inline ::onnx::OperatorSetIdProto* add_opset_import();
  inline const ::google::protobuf::RepeatedPtrField< ::onnx::OperatorSetIdProto >&
      opset_import() const;
  inline ::google::protobuf::RepeatedPtrField< ::onnx::OperatorSetIdProto >*
      mutable_opset_import();

  // optional string producer_name = 2;
  inline bool has_producer_name() const;
  inline void clear_producer_name();
  static const int kProducerNameFieldNumber = 2;
  inline const ::std::string& producer_name() const;
  inline void set_producer_name(const ::std::string& value);
  inline void set_producer_name(const char* value);
  inline void set_producer_name(const char* value, size_t size);
  inline ::std::string* mutable_producer_name();
  inline ::std::string* release_producer_name();
  inline void set_allocated_producer_name(::std::string* producer_name);

  // optional string producer_version = 3;
  inline bool has_producer_version() const;
  inline void clear_producer_version();
  static const int kProducerVersionFieldNumber = 3;
  inline const ::std::string& producer_version() const;
  inline void set_producer_version(const ::std::string& value);
  inline void set_producer_version(const char* value);
  inline void set_producer_version(const char* value, size_t size);
  inline ::std::string* mutable_producer_version();
  inline ::std::string* release_producer_version();
  inline void set_allocated_producer_version(::std::string* producer_version);

  // optional string domain = 4;
  inline bool has_domain() const;
  inline void clear_domain();
  static const int kDomainFieldNumber = 4;
  inline const ::std::string& domain() const;
  inline void set_domain(const ::std::string& value);
  inline void set_domain(const char* value);
  inline void set_domain(const char* value, size_t size);
  inline ::std::string* mutable_domain();
  inline ::std::string* release_domain();
  inline void set_allocated_domain(::std::string* domain);

  // optional int64 model_version = 5;
  inline bool has_model_version() const;
  inline void clear_model_version();
  static const int kModelVersionFieldNumber = 5;
  inline ::google::protobuf::int64 model_version() const;
  inline void set_model_version(::google::protobuf::int64 value);

  // optional string doc_string = 6;
  inline bool has_doc_string() const;
  inline void clear_doc_string();
  static const int kDocStringFieldNumber = 6;
  inline const ::std::string& doc_string() const;
  inline void set_doc_string(const ::std::string& value);
  inline void set_doc_string(const char* value);
  inline void set_doc_string(const char* value, size_t size);
  inline ::std::string* mutable_doc_string();
  inline ::std::string* release_doc_string();
  inline void set_allocated_doc_string(::std::string* doc_string);

  // optional .onnx.GraphProto graph = 7;
  inline bool has_graph() const;
  inline void clear_graph();
  static const int kGraphFieldNumber = 7;
  inline const ::onnx::GraphProto& graph() const;
  inline ::onnx::GraphProto* mutable_graph();
  inline ::onnx::GraphProto* release_graph();
  inline void set_allocated_graph(::onnx::GraphProto* graph);

  // repeated .onnx.StringStringEntryProto metadata_props = 14;
  inline int metadata_props_size() const;
  inline void clear_metadata_props();
  static const int kMetadataPropsFieldNumber = 14;
  inline const ::onnx::StringStringEntryProto& metadata_props(int index) const;
  inline ::onnx::StringStringEntryProto* mutable_metadata_props(int index);
  inline ::onnx::StringStringEntryProto* add_metadata_props();
  inline const ::google::protobuf::RepeatedPtrField< ::onnx::StringStringEntryProto >&
      metadata_props() const;
  inline ::google::protobuf::RepeatedPtrField< ::onnx::StringStringEntryProto >*
      mutable_metadata_props();

  // @@protoc_insertion_point(class_scope:onnx.ModelProto)
 private:
  inline void set_has_ir_version();
  inline void clear_has_ir_version();
  inline void set_has_producer_name();
  inline void clear_has_producer_name();
  inline void set_has_producer_version();
  inline void clear_has_producer_version();
  inline void set_has_domain();
  inline void clear_has_domain();
  inline void set_has_model_version();
  inline void clear_has_model_version();
  inline void set_has_doc_string();
  inline void clear_has_doc_string();
  inline void set_has_graph();
  inline void clear_has_graph();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 ir_version_;
  ::google::protobuf::RepeatedPtrField< ::onnx::OperatorSetIdProto > opset_import_;
  ::std::string* producer_name_;
  ::std::string* producer_version_;
  ::std::string* domain_;
  ::google::protobuf::int64 model_version_;
  ::std::string* doc_string_;
  ::onnx::GraphProto* graph_;
  ::google::protobuf::RepeatedPtrField< ::onnx::StringStringEntryProto > metadata_props_;
  friend void  protobuf_AddDesc_onnx_2eproto();
  friend void protobuf_AssignDesc_onnx_2eproto();
  friend void protobuf_ShutdownFile_onnx_2eproto();

  void InitAsDefaultInstance();
  static ModelProto* default_instance_;
};
// -------------------------------------------------------------------

class StringStringEntryProto : public ::google::protobuf::Message {
 public:
  StringStringEntryProto();
  virtual ~StringStringEntryProto();

  StringStringEntryProto(const StringStringEntryProto& from);

  inline StringStringEntryProto& operator=(const StringStringEntryProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StringStringEntryProto& default_instance();

  void Swap(StringStringEntryProto* other);

  // implements Message ----------------------------------------------

  StringStringEntryProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StringStringEntryProto& from);
  void MergeFrom(const StringStringEntryProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string key = 1;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 1;
  inline const ::std::string& key() const;
  inline void set_key(const ::std::string& value);
  inline void set_key(const char* value);
  inline void set_key(const char* value, size_t size);
  inline ::std::string* mutable_key();
  inline ::std::string* release_key();
  inline void set_allocated_key(::std::string* key);

  // optional string value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline const ::std::string& value() const;
  inline void set_value(const ::std::string& value);
  inline void set_value(const char* value);
  inline void set_value(const char* value, size_t size);
  inline ::std::string* mutable_value();
  inline ::std::string* release_value();
  inline void set_allocated_value(::std::string* value);

  // @@protoc_insertion_point(class_scope:onnx.StringStringEntryProto)
 private:
  inline void set_has_key();
  inline void clear_has_key();
  inline void set_has_value();
  inline void clear_has_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* key_;
  ::std::string* value_;
  friend void  protobuf_AddDesc_onnx_2eproto();
  friend void protobuf_AssignDesc_onnx_2eproto();
  friend void protobuf_ShutdownFile_onnx_2eproto();

  void InitAsDefaultInstance();
  static StringStringEntryProto* default_instance_;
};
// -------------------------------------------------------------------

class TensorAnnotation : public ::google::protobuf::Message {
 public:
  TensorAnnotation();
  virtual ~TensorAnnotation();

  TensorAnnotation(const TensorAnnotation& from);

  inline TensorAnnotation& operator=(const TensorAnnotation& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TensorAnnotation& default_instance();

  void Swap(TensorAnnotation* other);

  // implements Message ----------------------------------------------

  TensorAnnotation* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TensorAnnotation& from);
  void MergeFrom(const TensorAnnotation& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string tensor_name = 1;
  inline bool has_tensor_name() const;
  inline void clear_tensor_name();
  static const int kTensorNameFieldNumber = 1;
  inline const ::std::string& tensor_name() const;
  inline void set_tensor_name(const ::std::string& value);
  inline void set_tensor_name(const char* value);
  inline void set_tensor_name(const char* value, size_t size);
  inline ::std::string* mutable_tensor_name();
  inline ::std::string* release_tensor_name();
  inline void set_allocated_tensor_name(::std::string* tensor_name);

  // repeated .onnx.StringStringEntryProto quant_parameter_tensor_names = 2;
  inline int quant_parameter_tensor_names_size() const;
  inline void clear_quant_parameter_tensor_names();
  static const int kQuantParameterTensorNamesFieldNumber = 2;
  inline const ::onnx::StringStringEntryProto& quant_parameter_tensor_names(int index) const;
  inline ::onnx::StringStringEntryProto* mutable_quant_parameter_tensor_names(int index);
  inline ::onnx::StringStringEntryProto* add_quant_parameter_tensor_names();
  inline const ::google::protobuf::RepeatedPtrField< ::onnx::StringStringEntryProto >&
      quant_parameter_tensor_names() const;
  inline ::google::protobuf::RepeatedPtrField< ::onnx::StringStringEntryProto >*
      mutable_quant_parameter_tensor_names();

  // @@protoc_insertion_point(class_scope:onnx.TensorAnnotation)
 private:
  inline void set_has_tensor_name();
  inline void clear_has_tensor_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* tensor_name_;
  ::google::protobuf::RepeatedPtrField< ::onnx::StringStringEntryProto > quant_parameter_tensor_names_;
  friend void  protobuf_AddDesc_onnx_2eproto();
  friend void protobuf_AssignDesc_onnx_2eproto();
  friend void protobuf_ShutdownFile_onnx_2eproto();

  void InitAsDefaultInstance();
  static TensorAnnotation* default_instance_;
};
// -------------------------------------------------------------------

class GraphProto : public ::google::protobuf::Message {
 public:
  GraphProto();
  virtual ~GraphProto();

  GraphProto(const GraphProto& from);

  inline GraphProto& operator=(const GraphProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GraphProto& default_instance();

  void Swap(GraphProto* other);

  // implements Message ----------------------------------------------

  GraphProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GraphProto& from);
  void MergeFrom(const GraphProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .onnx.NodeProto node = 1;
  inline int node_size() const;
  inline void clear_node();
  static const int kNodeFieldNumber = 1;
  inline const ::onnx::NodeProto& node(int index) const;
  inline ::onnx::NodeProto* mutable_node(int index);
  inline ::onnx::NodeProto* add_node();
  inline const ::google::protobuf::RepeatedPtrField< ::onnx::NodeProto >&
      node() const;
  inline ::google::protobuf::RepeatedPtrField< ::onnx::NodeProto >*
      mutable_node();

  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // repeated .onnx.TensorProto initializer = 5;
  inline int initializer_size() const;
  inline void clear_initializer();
  static const int kInitializerFieldNumber = 5;
  inline const ::onnx::TensorProto& initializer(int index) const;
  inline ::onnx::TensorProto* mutable_initializer(int index);
  inline ::onnx::TensorProto* add_initializer();
  inline const ::google::protobuf::RepeatedPtrField< ::onnx::TensorProto >&
      initializer() const;
  inline ::google::protobuf::RepeatedPtrField< ::onnx::TensorProto >*
      mutable_initializer();

  // optional string doc_string = 10;
  inline bool has_doc_string() const;
  inline void clear_doc_string();
  static const int kDocStringFieldNumber = 10;
  inline const ::std::string& doc_string() const;
  inline void set_doc_string(const ::std::string& value);
  inline void set_doc_string(const char* value);
  inline void set_doc_string(const char* value, size_t size);
  inline ::std::string* mutable_doc_string();
  inline ::std::string* release_doc_string();
  inline void set_allocated_doc_string(::std::string* doc_string);

  // repeated .onnx.ValueInfoProto input = 11;
  inline int input_size() const;
  inline void clear_input();
  static const int kInputFieldNumber = 11;
  inline const ::onnx::ValueInfoProto& input(int index) const;
  inline ::onnx::ValueInfoProto* mutable_input(int index);
  inline ::onnx::ValueInfoProto* add_input();
  inline const ::google::protobuf::RepeatedPtrField< ::onnx::ValueInfoProto >&
      input() const;
  inline ::google::protobuf::RepeatedPtrField< ::onnx::ValueInfoProto >*
      mutable_input();

  // repeated .onnx.ValueInfoProto output = 12;
  inline int output_size() const;
  inline void clear_output();
  static const int kOutputFieldNumber = 12;
  inline const ::onnx::ValueInfoProto& output(int index) const;
  inline ::onnx::ValueInfoProto* mutable_output(int index);
  inline ::onnx::ValueInfoProto* add_output();
  inline const ::google::protobuf::RepeatedPtrField< ::onnx::ValueInfoProto >&
      output() const;
  inline ::google::protobuf::RepeatedPtrField< ::onnx::ValueInfoProto >*
      mutable_output();

  // repeated .onnx.ValueInfoProto value_info = 13;
  inline int value_info_size() const;
  inline void clear_value_info();
  static const int kValueInfoFieldNumber = 13;
  inline const ::onnx::ValueInfoProto& value_info(int index) const;
  inline ::onnx::ValueInfoProto* mutable_value_info(int index);
  inline ::onnx::ValueInfoProto* add_value_info();
  inline const ::google::protobuf::RepeatedPtrField< ::onnx::ValueInfoProto >&
      value_info() const;
  inline ::google::protobuf::RepeatedPtrField< ::onnx::ValueInfoProto >*
      mutable_value_info();

  // repeated .onnx.TensorAnnotation quantization_annotation = 14;
  inline int quantization_annotation_size() const;
  inline void clear_quantization_annotation();
  static const int kQuantizationAnnotationFieldNumber = 14;
  inline const ::onnx::TensorAnnotation& quantization_annotation(int index) const;
  inline ::onnx::TensorAnnotation* mutable_quantization_annotation(int index);
  inline ::onnx::TensorAnnotation* add_quantization_annotation();
  inline const ::google::protobuf::RepeatedPtrField< ::onnx::TensorAnnotation >&
      quantization_annotation() const;
  inline ::google::protobuf::RepeatedPtrField< ::onnx::TensorAnnotation >*
      mutable_quantization_annotation();

  // @@protoc_insertion_point(class_scope:onnx.GraphProto)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_doc_string();
  inline void clear_has_doc_string();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::onnx::NodeProto > node_;
  ::std::string* name_;
  ::google::protobuf::RepeatedPtrField< ::onnx::TensorProto > initializer_;
  ::std::string* doc_string_;
  ::google::protobuf::RepeatedPtrField< ::onnx::ValueInfoProto > input_;
  ::google::protobuf::RepeatedPtrField< ::onnx::ValueInfoProto > output_;
  ::google::protobuf::RepeatedPtrField< ::onnx::ValueInfoProto > value_info_;
  ::google::protobuf::RepeatedPtrField< ::onnx::TensorAnnotation > quantization_annotation_;
  friend void  protobuf_AddDesc_onnx_2eproto();
  friend void protobuf_AssignDesc_onnx_2eproto();
  friend void protobuf_ShutdownFile_onnx_2eproto();

  void InitAsDefaultInstance();
  static GraphProto* default_instance_;
};
// -------------------------------------------------------------------

class TensorProto_Segment : public ::google::protobuf::Message {
 public:
  TensorProto_Segment();
  virtual ~TensorProto_Segment();

  TensorProto_Segment(const TensorProto_Segment& from);

  inline TensorProto_Segment& operator=(const TensorProto_Segment& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TensorProto_Segment& default_instance();

  void Swap(TensorProto_Segment* other);

  // implements Message ----------------------------------------------

  TensorProto_Segment* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TensorProto_Segment& from);
  void MergeFrom(const TensorProto_Segment& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 begin = 1;
  inline bool has_begin() const;
  inline void clear_begin();
  static const int kBeginFieldNumber = 1;
  inline ::google::protobuf::int64 begin() const;
  inline void set_begin(::google::protobuf::int64 value);

  // optional int64 end = 2;
  inline bool has_end() const;
  inline void clear_end();
  static const int kEndFieldNumber = 2;
  inline ::google::protobuf::int64 end() const;
  inline void set_end(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:onnx.TensorProto.Segment)
 private:
  inline void set_has_begin();
  inline void clear_has_begin();
  inline void set_has_end();
  inline void clear_has_end();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 begin_;
  ::google::protobuf::int64 end_;
  friend void  protobuf_AddDesc_onnx_2eproto();
  friend void protobuf_AssignDesc_onnx_2eproto();
  friend void protobuf_ShutdownFile_onnx_2eproto();

  void InitAsDefaultInstance();
  static TensorProto_Segment* default_instance_;
};
// -------------------------------------------------------------------

class TensorProto : public ::google::protobuf::Message {
 public:
  TensorProto();
  virtual ~TensorProto();

  TensorProto(const TensorProto& from);

  inline TensorProto& operator=(const TensorProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TensorProto& default_instance();

  void Swap(TensorProto* other);

  // implements Message ----------------------------------------------

  TensorProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TensorProto& from);
  void MergeFrom(const TensorProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef TensorProto_Segment Segment;

  typedef TensorProto_DataType DataType;
  static const DataType UNDEFINED = TensorProto_DataType_UNDEFINED;
  static const DataType FLOAT = TensorProto_DataType_FLOAT;
  static const DataType UINT8 = TensorProto_DataType_UINT8;
  static const DataType INT8 = TensorProto_DataType_INT8;
  static const DataType UINT16 = TensorProto_DataType_UINT16;
  static const DataType INT16 = TensorProto_DataType_INT16;
  static const DataType INT32 = TensorProto_DataType_INT32;
  static const DataType INT64 = TensorProto_DataType_INT64;
  static const DataType STRING = TensorProto_DataType_STRING;
  static const DataType BOOL = TensorProto_DataType_BOOL;
  static const DataType FLOAT16 = TensorProto_DataType_FLOAT16;
  static const DataType DOUBLE = TensorProto_DataType_DOUBLE;
  static const DataType UINT32 = TensorProto_DataType_UINT32;
  static const DataType UINT64 = TensorProto_DataType_UINT64;
  static const DataType COMPLEX64 = TensorProto_DataType_COMPLEX64;
  static const DataType COMPLEX128 = TensorProto_DataType_COMPLEX128;
  static const DataType BFLOAT16 = TensorProto_DataType_BFLOAT16;
  static inline bool DataType_IsValid(int value) {
    return TensorProto_DataType_IsValid(value);
  }
  static const DataType DataType_MIN =
    TensorProto_DataType_DataType_MIN;
  static const DataType DataType_MAX =
    TensorProto_DataType_DataType_MAX;
  static const int DataType_ARRAYSIZE =
    TensorProto_DataType_DataType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  DataType_descriptor() {
    return TensorProto_DataType_descriptor();
  }
  static inline const ::std::string& DataType_Name(DataType value) {
    return TensorProto_DataType_Name(value);
  }
  static inline bool DataType_Parse(const ::std::string& name,
      DataType* value) {
    return TensorProto_DataType_Parse(name, value);
  }

  typedef TensorProto_DataLocation DataLocation;
  static const DataLocation DEFAULT = TensorProto_DataLocation_DEFAULT;
  static const DataLocation EXTERNAL = TensorProto_DataLocation_EXTERNAL;
  static inline bool DataLocation_IsValid(int value) {
    return TensorProto_DataLocation_IsValid(value);
  }
  static const DataLocation DataLocation_MIN =
    TensorProto_DataLocation_DataLocation_MIN;
  static const DataLocation DataLocation_MAX =
    TensorProto_DataLocation_DataLocation_MAX;
  static const int DataLocation_ARRAYSIZE =
    TensorProto_DataLocation_DataLocation_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  DataLocation_descriptor() {
    return TensorProto_DataLocation_descriptor();
  }
  static inline const ::std::string& DataLocation_Name(DataLocation value) {
    return TensorProto_DataLocation_Name(value);
  }
  static inline bool DataLocation_Parse(const ::std::string& name,
      DataLocation* value) {
    return TensorProto_DataLocation_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated int64 dims = 1;
  inline int dims_size() const;
  inline void clear_dims();
  static const int kDimsFieldNumber = 1;
  inline ::google::protobuf::int64 dims(int index) const;
  inline void set_dims(int index, ::google::protobuf::int64 value);
  inline void add_dims(::google::protobuf::int64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      dims() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_dims();

  // optional int32 data_type = 2;
  inline bool has_data_type() const;
  inline void clear_data_type();
  static const int kDataTypeFieldNumber = 2;
  inline ::google::protobuf::int32 data_type() const;
  inline void set_data_type(::google::protobuf::int32 value);

  // optional .onnx.TensorProto.Segment segment = 3;
  inline bool has_segment() const;
  inline void clear_segment();
  static const int kSegmentFieldNumber = 3;
  inline const ::onnx::TensorProto_Segment& segment() const;
  inline ::onnx::TensorProto_Segment* mutable_segment();
  inline ::onnx::TensorProto_Segment* release_segment();
  inline void set_allocated_segment(::onnx::TensorProto_Segment* segment);

  // repeated float float_data = 4 [packed = true];
  inline int float_data_size() const;
  inline void clear_float_data();
  static const int kFloatDataFieldNumber = 4;
  inline float float_data(int index) const;
  inline void set_float_data(int index, float value);
  inline void add_float_data(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      float_data() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_float_data();

  // repeated int32 int32_data = 5 [packed = true];
  inline int int32_data_size() const;
  inline void clear_int32_data();
  static const int kInt32DataFieldNumber = 5;
  inline ::google::protobuf::int32 int32_data(int index) const;
  inline void set_int32_data(int index, ::google::protobuf::int32 value);
  inline void add_int32_data(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      int32_data() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_int32_data();

  // repeated bytes string_data = 6;
  inline int string_data_size() const;
  inline void clear_string_data();
  static const int kStringDataFieldNumber = 6;
  inline const ::std::string& string_data(int index) const;
  inline ::std::string* mutable_string_data(int index);
  inline void set_string_data(int index, const ::std::string& value);
  inline void set_string_data(int index, const char* value);
  inline void set_string_data(int index, const void* value, size_t size);
  inline ::std::string* add_string_data();
  inline void add_string_data(const ::std::string& value);
  inline void add_string_data(const char* value);
  inline void add_string_data(const void* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& string_data() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_string_data();

  // repeated int64 int64_data = 7 [packed = true];
  inline int int64_data_size() const;
  inline void clear_int64_data();
  static const int kInt64DataFieldNumber = 7;
  inline ::google::protobuf::int64 int64_data(int index) const;
  inline void set_int64_data(int index, ::google::protobuf::int64 value);
  inline void add_int64_data(::google::protobuf::int64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      int64_data() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_int64_data();

  // optional string name = 8;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 8;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional string doc_string = 12;
  inline bool has_doc_string() const;
  inline void clear_doc_string();
  static const int kDocStringFieldNumber = 12;
  inline const ::std::string& doc_string() const;
  inline void set_doc_string(const ::std::string& value);
  inline void set_doc_string(const char* value);
  inline void set_doc_string(const char* value, size_t size);
  inline ::std::string* mutable_doc_string();
  inline ::std::string* release_doc_string();
  inline void set_allocated_doc_string(::std::string* doc_string);

  // optional bytes raw_data = 9;
  inline bool has_raw_data() const;
  inline void clear_raw_data();
  static const int kRawDataFieldNumber = 9;
  inline const ::std::string& raw_data() const;
  inline void set_raw_data(const ::std::string& value);
  inline void set_raw_data(const char* value);
  inline void set_raw_data(const void* value, size_t size);
  inline ::std::string* mutable_raw_data();
  inline ::std::string* release_raw_data();
  inline void set_allocated_raw_data(::std::string* raw_data);

  // repeated .onnx.StringStringEntryProto external_data = 13;
  inline int external_data_size() const;
  inline void clear_external_data();
  static const int kExternalDataFieldNumber = 13;
  inline const ::onnx::StringStringEntryProto& external_data(int index) const;
  inline ::onnx::StringStringEntryProto* mutable_external_data(int index);
  inline ::onnx::StringStringEntryProto* add_external_data();
  inline const ::google::protobuf::RepeatedPtrField< ::onnx::StringStringEntryProto >&
      external_data() const;
  inline ::google::protobuf::RepeatedPtrField< ::onnx::StringStringEntryProto >*
      mutable_external_data();

  // optional .onnx.TensorProto.DataLocation data_location = 14;
  inline bool has_data_location() const;
  inline void clear_data_location();
  static const int kDataLocationFieldNumber = 14;
  inline ::onnx::TensorProto_DataLocation data_location() const;
  inline void set_data_location(::onnx::TensorProto_DataLocation value);

  // repeated double double_data = 10 [packed = true];
  inline int double_data_size() const;
  inline void clear_double_data();
  static const int kDoubleDataFieldNumber = 10;
  inline double double_data(int index) const;
  inline void set_double_data(int index, double value);
  inline void add_double_data(double value);
  inline const ::google::protobuf::RepeatedField< double >&
      double_data() const;
  inline ::google::protobuf::RepeatedField< double >*
      mutable_double_data();

  // repeated uint64 uint64_data = 11 [packed = true];
  inline int uint64_data_size() const;
  inline void clear_uint64_data();
  static const int kUint64DataFieldNumber = 11;
  inline ::google::protobuf::uint64 uint64_data(int index) const;
  inline void set_uint64_data(int index, ::google::protobuf::uint64 value);
  inline void add_uint64_data(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      uint64_data() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_uint64_data();

  // @@protoc_insertion_point(class_scope:onnx.TensorProto)
 private:
  inline void set_has_data_type();
  inline void clear_has_data_type();
  inline void set_has_segment();
  inline void clear_has_segment();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_doc_string();
  inline void clear_has_doc_string();
  inline void set_has_raw_data();
  inline void clear_has_raw_data();
  inline void set_has_data_location();
  inline void clear_has_data_location();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > dims_;
  ::onnx::TensorProto_Segment* segment_;
  ::google::protobuf::RepeatedField< float > float_data_;
  mutable int _float_data_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > int32_data_;
  mutable int _int32_data_cached_byte_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> string_data_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > int64_data_;
  mutable int _int64_data_cached_byte_size_;
  ::google::protobuf::int32 data_type_;
  int data_location_;
  ::std::string* name_;
  ::std::string* doc_string_;
  ::std::string* raw_data_;
  ::google::protobuf::RepeatedPtrField< ::onnx::StringStringEntryProto > external_data_;
  ::google::protobuf::RepeatedField< double > double_data_;
  mutable int _double_data_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > uint64_data_;
  mutable int _uint64_data_cached_byte_size_;
  friend void  protobuf_AddDesc_onnx_2eproto();
  friend void protobuf_AssignDesc_onnx_2eproto();
  friend void protobuf_ShutdownFile_onnx_2eproto();

  void InitAsDefaultInstance();
  static TensorProto* default_instance_;
};
// -------------------------------------------------------------------

class TensorShapeProto_Dimension : public ::google::protobuf::Message {
 public:
  TensorShapeProto_Dimension();
  virtual ~TensorShapeProto_Dimension();

  TensorShapeProto_Dimension(const TensorShapeProto_Dimension& from);

  inline TensorShapeProto_Dimension& operator=(const TensorShapeProto_Dimension& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TensorShapeProto_Dimension& default_instance();

  enum ValueCase {
    kDimValue = 1,
    kDimParam = 2,
    VALUE_NOT_SET = 0,
  };

  void Swap(TensorShapeProto_Dimension* other);

  // implements Message ----------------------------------------------

  TensorShapeProto_Dimension* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TensorShapeProto_Dimension& from);
  void MergeFrom(const TensorShapeProto_Dimension& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 dim_value = 1;
  inline bool has_dim_value() const;
  inline void clear_dim_value();
  static const int kDimValueFieldNumber = 1;
  inline ::google::protobuf::int64 dim_value() const;
  inline void set_dim_value(::google::protobuf::int64 value);

  // optional string dim_param = 2;
  inline bool has_dim_param() const;
  inline void clear_dim_param();
  static const int kDimParamFieldNumber = 2;
  inline const ::std::string& dim_param() const;
  inline void set_dim_param(const ::std::string& value);
  inline void set_dim_param(const char* value);
  inline void set_dim_param(const char* value, size_t size);
  inline ::std::string* mutable_dim_param();
  inline ::std::string* release_dim_param();
  inline void set_allocated_dim_param(::std::string* dim_param);

  // optional string denotation = 3;
  inline bool has_denotation() const;
  inline void clear_denotation();
  static const int kDenotationFieldNumber = 3;
  inline const ::std::string& denotation() const;
  inline void set_denotation(const ::std::string& value);
  inline void set_denotation(const char* value);
  inline void set_denotation(const char* value, size_t size);
  inline ::std::string* mutable_denotation();
  inline ::std::string* release_denotation();
  inline void set_allocated_denotation(::std::string* denotation);

  inline ValueCase value_case() const;
  // @@protoc_insertion_point(class_scope:onnx.TensorShapeProto.Dimension)
 private:
  inline void set_has_dim_value();
  inline void set_has_dim_param();
  inline void set_has_denotation();
  inline void clear_has_denotation();

  inline bool has_value();
  void clear_value();
  inline void clear_has_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* denotation_;
  union ValueUnion {
    ::google::protobuf::int64 dim_value_;
    ::std::string* dim_param_;
  } value_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend void  protobuf_AddDesc_onnx_2eproto();
  friend void protobuf_AssignDesc_onnx_2eproto();
  friend void protobuf_ShutdownFile_onnx_2eproto();

  void InitAsDefaultInstance();
  static TensorShapeProto_Dimension* default_instance_;
};
// -------------------------------------------------------------------

class TensorShapeProto : public ::google::protobuf::Message {
 public:
  TensorShapeProto();
  virtual ~TensorShapeProto();

  TensorShapeProto(const TensorShapeProto& from);

  inline TensorShapeProto& operator=(const TensorShapeProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TensorShapeProto& default_instance();

  void Swap(TensorShapeProto* other);

  // implements Message ----------------------------------------------

  TensorShapeProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TensorShapeProto& from);
  void MergeFrom(const TensorShapeProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef TensorShapeProto_Dimension Dimension;

  // accessors -------------------------------------------------------

  // repeated .onnx.TensorShapeProto.Dimension dim = 1;
  inline int dim_size() const;
  inline void clear_dim();
  static const int kDimFieldNumber = 1;
  inline const ::onnx::TensorShapeProto_Dimension& dim(int index) const;
  inline ::onnx::TensorShapeProto_Dimension* mutable_dim(int index);
  inline ::onnx::TensorShapeProto_Dimension* add_dim();
  inline const ::google::protobuf::RepeatedPtrField< ::onnx::TensorShapeProto_Dimension >&
      dim() const;
  inline ::google::protobuf::RepeatedPtrField< ::onnx::TensorShapeProto_Dimension >*
      mutable_dim();

  // @@protoc_insertion_point(class_scope:onnx.TensorShapeProto)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::onnx::TensorShapeProto_Dimension > dim_;
  friend void  protobuf_AddDesc_onnx_2eproto();
  friend void protobuf_AssignDesc_onnx_2eproto();
  friend void protobuf_ShutdownFile_onnx_2eproto();

  void InitAsDefaultInstance();
  static TensorShapeProto* default_instance_;
};
// -------------------------------------------------------------------

class TypeProto_Tensor : public ::google::protobuf::Message {
 public:
  TypeProto_Tensor();
  virtual ~TypeProto_Tensor();

  TypeProto_Tensor(const TypeProto_Tensor& from);

  inline TypeProto_Tensor& operator=(const TypeProto_Tensor& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TypeProto_Tensor& default_instance();

  void Swap(TypeProto_Tensor* other);

  // implements Message ----------------------------------------------

  TypeProto_Tensor* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TypeProto_Tensor& from);
  void MergeFrom(const TypeProto_Tensor& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 elem_type = 1;
  inline bool has_elem_type() const;
  inline void clear_elem_type();
  static const int kElemTypeFieldNumber = 1;
  inline ::google::protobuf::int32 elem_type() const;
  inline void set_elem_type(::google::protobuf::int32 value);

  // optional .onnx.TensorShapeProto shape = 2;
  inline bool has_shape() const;
  inline void clear_shape();
  static const int kShapeFieldNumber = 2;
  inline const ::onnx::TensorShapeProto& shape() const;
  inline ::onnx::TensorShapeProto* mutable_shape();
  inline ::onnx::TensorShapeProto* release_shape();
  inline void set_allocated_shape(::onnx::TensorShapeProto* shape);

  // @@protoc_insertion_point(class_scope:onnx.TypeProto.Tensor)
 private:
  inline void set_has_elem_type();
  inline void clear_has_elem_type();
  inline void set_has_shape();
  inline void clear_has_shape();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::onnx::TensorShapeProto* shape_;
  ::google::protobuf::int32 elem_type_;
  friend void  protobuf_AddDesc_onnx_2eproto();
  friend void protobuf_AssignDesc_onnx_2eproto();
  friend void protobuf_ShutdownFile_onnx_2eproto();

  void InitAsDefaultInstance();
  static TypeProto_Tensor* default_instance_;
};
// -------------------------------------------------------------------

class TypeProto : public ::google::protobuf::Message {
 public:
  TypeProto();
  virtual ~TypeProto();

  TypeProto(const TypeProto& from);

  inline TypeProto& operator=(const TypeProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TypeProto& default_instance();

  enum ValueCase {
    kTensorType = 1,
    VALUE_NOT_SET = 0,
  };

  void Swap(TypeProto* other);

  // implements Message ----------------------------------------------

  TypeProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TypeProto& from);
  void MergeFrom(const TypeProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef TypeProto_Tensor Tensor;

  // accessors -------------------------------------------------------

  // optional .onnx.TypeProto.Tensor tensor_type = 1;
  inline bool has_tensor_type() const;
  inline void clear_tensor_type();
  static const int kTensorTypeFieldNumber = 1;
  inline const ::onnx::TypeProto_Tensor& tensor_type() const;
  inline ::onnx::TypeProto_Tensor* mutable_tensor_type();
  inline ::onnx::TypeProto_Tensor* release_tensor_type();
  inline void set_allocated_tensor_type(::onnx::TypeProto_Tensor* tensor_type);

  // optional string denotation = 6;
  inline bool has_denotation() const;
  inline void clear_denotation();
  static const int kDenotationFieldNumber = 6;
  inline const ::std::string& denotation() const;
  inline void set_denotation(const ::std::string& value);
  inline void set_denotation(const char* value);
  inline void set_denotation(const char* value, size_t size);
  inline ::std::string* mutable_denotation();
  inline ::std::string* release_denotation();
  inline void set_allocated_denotation(::std::string* denotation);

  inline ValueCase value_case() const;
  // @@protoc_insertion_point(class_scope:onnx.TypeProto)
 private:
  inline void set_has_tensor_type();
  inline void set_has_denotation();
  inline void clear_has_denotation();

  inline bool has_value();
  void clear_value();
  inline void clear_has_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* denotation_;
  union ValueUnion {
    ::onnx::TypeProto_Tensor* tensor_type_;
  } value_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend void  protobuf_AddDesc_onnx_2eproto();
  friend void protobuf_AssignDesc_onnx_2eproto();
  friend void protobuf_ShutdownFile_onnx_2eproto();

  void InitAsDefaultInstance();
  static TypeProto* default_instance_;
};
// -------------------------------------------------------------------

class OperatorSetIdProto : public ::google::protobuf::Message {
 public:
  OperatorSetIdProto();
  virtual ~OperatorSetIdProto();

  OperatorSetIdProto(const OperatorSetIdProto& from);

  inline OperatorSetIdProto& operator=(const OperatorSetIdProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OperatorSetIdProto& default_instance();

  void Swap(OperatorSetIdProto* other);

  // implements Message ----------------------------------------------

  OperatorSetIdProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OperatorSetIdProto& from);
  void MergeFrom(const OperatorSetIdProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string domain = 1;
  inline bool has_domain() const;
  inline void clear_domain();
  static const int kDomainFieldNumber = 1;
  inline const ::std::string& domain() const;
  inline void set_domain(const ::std::string& value);
  inline void set_domain(const char* value);
  inline void set_domain(const char* value, size_t size);
  inline ::std::string* mutable_domain();
  inline ::std::string* release_domain();
  inline void set_allocated_domain(::std::string* domain);

  // optional int64 version = 2;
  inline bool has_version() const;
  inline void clear_version();
  static const int kVersionFieldNumber = 2;
  inline ::google::protobuf::int64 version() const;
  inline void set_version(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:onnx.OperatorSetIdProto)
 private:
  inline void set_has_domain();
  inline void clear_has_domain();
  inline void set_has_version();
  inline void clear_has_version();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* domain_;
  ::google::protobuf::int64 version_;
  friend void  protobuf_AddDesc_onnx_2eproto();
  friend void protobuf_AssignDesc_onnx_2eproto();
  friend void protobuf_ShutdownFile_onnx_2eproto();

  void InitAsDefaultInstance();
  static OperatorSetIdProto* default_instance_;
};
// ===================================================================


// ===================================================================

// AttributeProto

// optional string name = 1;
inline bool AttributeProto::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AttributeProto::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AttributeProto::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AttributeProto::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& AttributeProto::name() const {
  // @@protoc_insertion_point(field_get:onnx.AttributeProto.name)
  return *name_;
}
inline void AttributeProto::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:onnx.AttributeProto.name)
}
inline void AttributeProto::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:onnx.AttributeProto.name)
}
inline void AttributeProto::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:onnx.AttributeProto.name)
}
inline ::std::string* AttributeProto::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:onnx.AttributeProto.name)
  return name_;
}
inline ::std::string* AttributeProto::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void AttributeProto::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:onnx.AttributeProto.name)
}

// optional string ref_attr_name = 21;
inline bool AttributeProto::has_ref_attr_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AttributeProto::set_has_ref_attr_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AttributeProto::clear_has_ref_attr_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AttributeProto::clear_ref_attr_name() {
  if (ref_attr_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ref_attr_name_->clear();
  }
  clear_has_ref_attr_name();
}
inline const ::std::string& AttributeProto::ref_attr_name() const {
  // @@protoc_insertion_point(field_get:onnx.AttributeProto.ref_attr_name)
  return *ref_attr_name_;
}
inline void AttributeProto::set_ref_attr_name(const ::std::string& value) {
  set_has_ref_attr_name();
  if (ref_attr_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ref_attr_name_ = new ::std::string;
  }
  ref_attr_name_->assign(value);
  // @@protoc_insertion_point(field_set:onnx.AttributeProto.ref_attr_name)
}
inline void AttributeProto::set_ref_attr_name(const char* value) {
  set_has_ref_attr_name();
  if (ref_attr_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ref_attr_name_ = new ::std::string;
  }
  ref_attr_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:onnx.AttributeProto.ref_attr_name)
}
inline void AttributeProto::set_ref_attr_name(const char* value, size_t size) {
  set_has_ref_attr_name();
  if (ref_attr_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ref_attr_name_ = new ::std::string;
  }
  ref_attr_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:onnx.AttributeProto.ref_attr_name)
}
inline ::std::string* AttributeProto::mutable_ref_attr_name() {
  set_has_ref_attr_name();
  if (ref_attr_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ref_attr_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:onnx.AttributeProto.ref_attr_name)
  return ref_attr_name_;
}
inline ::std::string* AttributeProto::release_ref_attr_name() {
  clear_has_ref_attr_name();
  if (ref_attr_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = ref_attr_name_;
    ref_attr_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void AttributeProto::set_allocated_ref_attr_name(::std::string* ref_attr_name) {
  if (ref_attr_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ref_attr_name_;
  }
  if (ref_attr_name) {
    set_has_ref_attr_name();
    ref_attr_name_ = ref_attr_name;
  } else {
    clear_has_ref_attr_name();
    ref_attr_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:onnx.AttributeProto.ref_attr_name)
}

// optional string doc_string = 13;
inline bool AttributeProto::has_doc_string() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AttributeProto::set_has_doc_string() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AttributeProto::clear_has_doc_string() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AttributeProto::clear_doc_string() {
  if (doc_string_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    doc_string_->clear();
  }
  clear_has_doc_string();
}
inline const ::std::string& AttributeProto::doc_string() const {
  // @@protoc_insertion_point(field_get:onnx.AttributeProto.doc_string)
  return *doc_string_;
}
inline void AttributeProto::set_doc_string(const ::std::string& value) {
  set_has_doc_string();
  if (doc_string_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    doc_string_ = new ::std::string;
  }
  doc_string_->assign(value);
  // @@protoc_insertion_point(field_set:onnx.AttributeProto.doc_string)
}
inline void AttributeProto::set_doc_string(const char* value) {
  set_has_doc_string();
  if (doc_string_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    doc_string_ = new ::std::string;
  }
  doc_string_->assign(value);
  // @@protoc_insertion_point(field_set_char:onnx.AttributeProto.doc_string)
}
inline void AttributeProto::set_doc_string(const char* value, size_t size) {
  set_has_doc_string();
  if (doc_string_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    doc_string_ = new ::std::string;
  }
  doc_string_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:onnx.AttributeProto.doc_string)
}
inline ::std::string* AttributeProto::mutable_doc_string() {
  set_has_doc_string();
  if (doc_string_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    doc_string_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:onnx.AttributeProto.doc_string)
  return doc_string_;
}
inline ::std::string* AttributeProto::release_doc_string() {
  clear_has_doc_string();
  if (doc_string_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = doc_string_;
    doc_string_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void AttributeProto::set_allocated_doc_string(::std::string* doc_string) {
  if (doc_string_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete doc_string_;
  }
  if (doc_string) {
    set_has_doc_string();
    doc_string_ = doc_string;
  } else {
    clear_has_doc_string();
    doc_string_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:onnx.AttributeProto.doc_string)
}

// optional .onnx.AttributeProto.AttributeType type = 20;
inline bool AttributeProto::has_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AttributeProto::set_has_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AttributeProto::clear_has_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AttributeProto::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::onnx::AttributeProto_AttributeType AttributeProto::type() const {
  // @@protoc_insertion_point(field_get:onnx.AttributeProto.type)
  return static_cast< ::onnx::AttributeProto_AttributeType >(type_);
}
inline void AttributeProto::set_type(::onnx::AttributeProto_AttributeType value) {
  assert(::onnx::AttributeProto_AttributeType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:onnx.AttributeProto.type)
}

// optional float f = 2;
inline bool AttributeProto::has_f() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void AttributeProto::set_has_f() {
  _has_bits_[0] |= 0x00000010u;
}
inline void AttributeProto::clear_has_f() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void AttributeProto::clear_f() {
  f_ = 0;
  clear_has_f();
}
inline float AttributeProto::f() const {
  // @@protoc_insertion_point(field_get:onnx.AttributeProto.f)
  return f_;
}
inline void AttributeProto::set_f(float value) {
  set_has_f();
  f_ = value;
  // @@protoc_insertion_point(field_set:onnx.AttributeProto.f)
}

// optional int64 i = 3;
inline bool AttributeProto::has_i() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void AttributeProto::set_has_i() {
  _has_bits_[0] |= 0x00000020u;
}
inline void AttributeProto::clear_has_i() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void AttributeProto::clear_i() {
  i_ = GOOGLE_LONGLONG(0);
  clear_has_i();
}
inline ::google::protobuf::int64 AttributeProto::i() const {
  // @@protoc_insertion_point(field_get:onnx.AttributeProto.i)
  return i_;
}
inline void AttributeProto::set_i(::google::protobuf::int64 value) {
  set_has_i();
  i_ = value;
  // @@protoc_insertion_point(field_set:onnx.AttributeProto.i)
}

// optional bytes s = 4;
inline bool AttributeProto::has_s() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void AttributeProto::set_has_s() {
  _has_bits_[0] |= 0x00000040u;
}
inline void AttributeProto::clear_has_s() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void AttributeProto::clear_s() {
  if (s_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    s_->clear();
  }
  clear_has_s();
}
inline const ::std::string& AttributeProto::s() const {
  // @@protoc_insertion_point(field_get:onnx.AttributeProto.s)
  return *s_;
}
inline void AttributeProto::set_s(const ::std::string& value) {
  set_has_s();
  if (s_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    s_ = new ::std::string;
  }
  s_->assign(value);
  // @@protoc_insertion_point(field_set:onnx.AttributeProto.s)
}
inline void AttributeProto::set_s(const char* value) {
  set_has_s();
  if (s_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    s_ = new ::std::string;
  }
  s_->assign(value);
  // @@protoc_insertion_point(field_set_char:onnx.AttributeProto.s)
}
inline void AttributeProto::set_s(const void* value, size_t size) {
  set_has_s();
  if (s_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    s_ = new ::std::string;
  }
  s_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:onnx.AttributeProto.s)
}
inline ::std::string* AttributeProto::mutable_s() {
  set_has_s();
  if (s_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    s_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:onnx.AttributeProto.s)
  return s_;
}
inline ::std::string* AttributeProto::release_s() {
  clear_has_s();
  if (s_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = s_;
    s_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void AttributeProto::set_allocated_s(::std::string* s) {
  if (s_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete s_;
  }
  if (s) {
    set_has_s();
    s_ = s;
  } else {
    clear_has_s();
    s_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:onnx.AttributeProto.s)
}

// optional .onnx.TensorProto t = 5;
inline bool AttributeProto::has_t() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void AttributeProto::set_has_t() {
  _has_bits_[0] |= 0x00000080u;
}
inline void AttributeProto::clear_has_t() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void AttributeProto::clear_t() {
  if (t_ != NULL) t_->::onnx::TensorProto::Clear();
  clear_has_t();
}
inline const ::onnx::TensorProto& AttributeProto::t() const {
  // @@protoc_insertion_point(field_get:onnx.AttributeProto.t)
  return t_ != NULL ? *t_ : *default_instance_->t_;
}
inline ::onnx::TensorProto* AttributeProto::mutable_t() {
  set_has_t();
  if (t_ == NULL) t_ = new ::onnx::TensorProto;
  // @@protoc_insertion_point(field_mutable:onnx.AttributeProto.t)
  return t_;
}
inline ::onnx::TensorProto* AttributeProto::release_t() {
  clear_has_t();
  ::onnx::TensorProto* temp = t_;
  t_ = NULL;
  return temp;
}
inline void AttributeProto::set_allocated_t(::onnx::TensorProto* t) {
  delete t_;
  t_ = t;
  if (t) {
    set_has_t();
  } else {
    clear_has_t();
  }
  // @@protoc_insertion_point(field_set_allocated:onnx.AttributeProto.t)
}

// optional .onnx.GraphProto g = 6;
inline bool AttributeProto::has_g() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void AttributeProto::set_has_g() {
  _has_bits_[0] |= 0x00000100u;
}
inline void AttributeProto::clear_has_g() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void AttributeProto::clear_g() {
  if (g_ != NULL) g_->::onnx::GraphProto::Clear();
  clear_has_g();
}
inline const ::onnx::GraphProto& AttributeProto::g() const {
  // @@protoc_insertion_point(field_get:onnx.AttributeProto.g)
  return g_ != NULL ? *g_ : *default_instance_->g_;
}
inline ::onnx::GraphProto* AttributeProto::mutable_g() {
  set_has_g();
  if (g_ == NULL) g_ = new ::onnx::GraphProto;
  // @@protoc_insertion_point(field_mutable:onnx.AttributeProto.g)
  return g_;
}
inline ::onnx::GraphProto* AttributeProto::release_g() {
  clear_has_g();
  ::onnx::GraphProto* temp = g_;
  g_ = NULL;
  return temp;
}
inline void AttributeProto::set_allocated_g(::onnx::GraphProto* g) {
  delete g_;
  g_ = g;
  if (g) {
    set_has_g();
  } else {
    clear_has_g();
  }
  // @@protoc_insertion_point(field_set_allocated:onnx.AttributeProto.g)
}

// repeated float floats = 7;
inline int AttributeProto::floats_size() const {
  return floats_.size();
}
inline void AttributeProto::clear_floats() {
  floats_.Clear();
}
inline float AttributeProto::floats(int index) const {
  // @@protoc_insertion_point(field_get:onnx.AttributeProto.floats)
  return floats_.Get(index);
}
inline void AttributeProto::set_floats(int index, float value) {
  floats_.Set(index, value);
  // @@protoc_insertion_point(field_set:onnx.AttributeProto.floats)
}
inline void AttributeProto::add_floats(float value) {
  floats_.Add(value);
  // @@protoc_insertion_point(field_add:onnx.AttributeProto.floats)
}
inline const ::google::protobuf::RepeatedField< float >&
AttributeProto::floats() const {
  // @@protoc_insertion_point(field_list:onnx.AttributeProto.floats)
  return floats_;
}
inline ::google::protobuf::RepeatedField< float >*
AttributeProto::mutable_floats() {
  // @@protoc_insertion_point(field_mutable_list:onnx.AttributeProto.floats)
  return &floats_;
}

// repeated int64 ints = 8;
inline int AttributeProto::ints_size() const {
  return ints_.size();
}
inline void AttributeProto::clear_ints() {
  ints_.Clear();
}
inline ::google::protobuf::int64 AttributeProto::ints(int index) const {
  // @@protoc_insertion_point(field_get:onnx.AttributeProto.ints)
  return ints_.Get(index);
}
inline void AttributeProto::set_ints(int index, ::google::protobuf::int64 value) {
  ints_.Set(index, value);
  // @@protoc_insertion_point(field_set:onnx.AttributeProto.ints)
}
inline void AttributeProto::add_ints(::google::protobuf::int64 value) {
  ints_.Add(value);
  // @@protoc_insertion_point(field_add:onnx.AttributeProto.ints)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
AttributeProto::ints() const {
  // @@protoc_insertion_point(field_list:onnx.AttributeProto.ints)
  return ints_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
AttributeProto::mutable_ints() {
  // @@protoc_insertion_point(field_mutable_list:onnx.AttributeProto.ints)
  return &ints_;
}

// repeated bytes strings = 9;
inline int AttributeProto::strings_size() const {
  return strings_.size();
}
inline void AttributeProto::clear_strings() {
  strings_.Clear();
}
inline const ::std::string& AttributeProto::strings(int index) const {
  // @@protoc_insertion_point(field_get:onnx.AttributeProto.strings)
  return strings_.Get(index);
}
inline ::std::string* AttributeProto::mutable_strings(int index) {
  // @@protoc_insertion_point(field_mutable:onnx.AttributeProto.strings)
  return strings_.Mutable(index);
}
inline void AttributeProto::set_strings(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:onnx.AttributeProto.strings)
  strings_.Mutable(index)->assign(value);
}
inline void AttributeProto::set_strings(int index, const char* value) {
  strings_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:onnx.AttributeProto.strings)
}
inline void AttributeProto::set_strings(int index, const void* value, size_t size) {
  strings_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:onnx.AttributeProto.strings)
}
inline ::std::string* AttributeProto::add_strings() {
  return strings_.Add();
}
inline void AttributeProto::add_strings(const ::std::string& value) {
  strings_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:onnx.AttributeProto.strings)
}
inline void AttributeProto::add_strings(const char* value) {
  strings_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:onnx.AttributeProto.strings)
}
inline void AttributeProto::add_strings(const void* value, size_t size) {
  strings_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:onnx.AttributeProto.strings)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
AttributeProto::strings() const {
  // @@protoc_insertion_point(field_list:onnx.AttributeProto.strings)
  return strings_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
AttributeProto::mutable_strings() {
  // @@protoc_insertion_point(field_mutable_list:onnx.AttributeProto.strings)
  return &strings_;
}

// repeated .onnx.TensorProto tensors = 10;
inline int AttributeProto::tensors_size() const {
  return tensors_.size();
}
inline void AttributeProto::clear_tensors() {
  tensors_.Clear();
}
inline const ::onnx::TensorProto& AttributeProto::tensors(int index) const {
  // @@protoc_insertion_point(field_get:onnx.AttributeProto.tensors)
  return tensors_.Get(index);
}
inline ::onnx::TensorProto* AttributeProto::mutable_tensors(int index) {
  // @@protoc_insertion_point(field_mutable:onnx.AttributeProto.tensors)
  return tensors_.Mutable(index);
}
inline ::onnx::TensorProto* AttributeProto::add_tensors() {
  // @@protoc_insertion_point(field_add:onnx.AttributeProto.tensors)
  return tensors_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::onnx::TensorProto >&
AttributeProto::tensors() const {
  // @@protoc_insertion_point(field_list:onnx.AttributeProto.tensors)
  return tensors_;
}
inline ::google::protobuf::RepeatedPtrField< ::onnx::TensorProto >*
AttributeProto::mutable_tensors() {
  // @@protoc_insertion_point(field_mutable_list:onnx.AttributeProto.tensors)
  return &tensors_;
}

// repeated .onnx.GraphProto graphs = 11;
inline int AttributeProto::graphs_size() const {
  return graphs_.size();
}
inline void AttributeProto::clear_graphs() {
  graphs_.Clear();
}
inline const ::onnx::GraphProto& AttributeProto::graphs(int index) const {
  // @@protoc_insertion_point(field_get:onnx.AttributeProto.graphs)
  return graphs_.Get(index);
}
inline ::onnx::GraphProto* AttributeProto::mutable_graphs(int index) {
  // @@protoc_insertion_point(field_mutable:onnx.AttributeProto.graphs)
  return graphs_.Mutable(index);
}
inline ::onnx::GraphProto* AttributeProto::add_graphs() {
  // @@protoc_insertion_point(field_add:onnx.AttributeProto.graphs)
  return graphs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::onnx::GraphProto >&
AttributeProto::graphs() const {
  // @@protoc_insertion_point(field_list:onnx.AttributeProto.graphs)
  return graphs_;
}
inline ::google::protobuf::RepeatedPtrField< ::onnx::GraphProto >*
AttributeProto::mutable_graphs() {
  // @@protoc_insertion_point(field_mutable_list:onnx.AttributeProto.graphs)
  return &graphs_;
}

// -------------------------------------------------------------------

// ValueInfoProto

// optional string name = 1;
inline bool ValueInfoProto::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ValueInfoProto::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ValueInfoProto::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ValueInfoProto::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& ValueInfoProto::name() const {
  // @@protoc_insertion_point(field_get:onnx.ValueInfoProto.name)
  return *name_;
}
inline void ValueInfoProto::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:onnx.ValueInfoProto.name)
}
inline void ValueInfoProto::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:onnx.ValueInfoProto.name)
}
inline void ValueInfoProto::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:onnx.ValueInfoProto.name)
}
inline ::std::string* ValueInfoProto::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:onnx.ValueInfoProto.name)
  return name_;
}
inline ::std::string* ValueInfoProto::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ValueInfoProto::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:onnx.ValueInfoProto.name)
}

// optional .onnx.TypeProto type = 2;
inline bool ValueInfoProto::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ValueInfoProto::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ValueInfoProto::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ValueInfoProto::clear_type() {
  if (type_ != NULL) type_->::onnx::TypeProto::Clear();
  clear_has_type();
}
inline const ::onnx::TypeProto& ValueInfoProto::type() const {
  // @@protoc_insertion_point(field_get:onnx.ValueInfoProto.type)
  return type_ != NULL ? *type_ : *default_instance_->type_;
}
inline ::onnx::TypeProto* ValueInfoProto::mutable_type() {
  set_has_type();
  if (type_ == NULL) type_ = new ::onnx::TypeProto;
  // @@protoc_insertion_point(field_mutable:onnx.ValueInfoProto.type)
  return type_;
}
inline ::onnx::TypeProto* ValueInfoProto::release_type() {
  clear_has_type();
  ::onnx::TypeProto* temp = type_;
  type_ = NULL;
  return temp;
}
inline void ValueInfoProto::set_allocated_type(::onnx::TypeProto* type) {
  delete type_;
  type_ = type;
  if (type) {
    set_has_type();
  } else {
    clear_has_type();
  }
  // @@protoc_insertion_point(field_set_allocated:onnx.ValueInfoProto.type)
}

// optional string doc_string = 3;
inline bool ValueInfoProto::has_doc_string() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ValueInfoProto::set_has_doc_string() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ValueInfoProto::clear_has_doc_string() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ValueInfoProto::clear_doc_string() {
  if (doc_string_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    doc_string_->clear();
  }
  clear_has_doc_string();
}
inline const ::std::string& ValueInfoProto::doc_string() const {
  // @@protoc_insertion_point(field_get:onnx.ValueInfoProto.doc_string)
  return *doc_string_;
}
inline void ValueInfoProto::set_doc_string(const ::std::string& value) {
  set_has_doc_string();
  if (doc_string_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    doc_string_ = new ::std::string;
  }
  doc_string_->assign(value);
  // @@protoc_insertion_point(field_set:onnx.ValueInfoProto.doc_string)
}
inline void ValueInfoProto::set_doc_string(const char* value) {
  set_has_doc_string();
  if (doc_string_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    doc_string_ = new ::std::string;
  }
  doc_string_->assign(value);
  // @@protoc_insertion_point(field_set_char:onnx.ValueInfoProto.doc_string)
}
inline void ValueInfoProto::set_doc_string(const char* value, size_t size) {
  set_has_doc_string();
  if (doc_string_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    doc_string_ = new ::std::string;
  }
  doc_string_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:onnx.ValueInfoProto.doc_string)
}
inline ::std::string* ValueInfoProto::mutable_doc_string() {
  set_has_doc_string();
  if (doc_string_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    doc_string_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:onnx.ValueInfoProto.doc_string)
  return doc_string_;
}
inline ::std::string* ValueInfoProto::release_doc_string() {
  clear_has_doc_string();
  if (doc_string_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = doc_string_;
    doc_string_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ValueInfoProto::set_allocated_doc_string(::std::string* doc_string) {
  if (doc_string_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete doc_string_;
  }
  if (doc_string) {
    set_has_doc_string();
    doc_string_ = doc_string;
  } else {
    clear_has_doc_string();
    doc_string_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:onnx.ValueInfoProto.doc_string)
}

// -------------------------------------------------------------------

// NodeProto

// repeated string input = 1;
inline int NodeProto::input_size() const {
  return input_.size();
}
inline void NodeProto::clear_input() {
  input_.Clear();
}
inline const ::std::string& NodeProto::input(int index) const {
  // @@protoc_insertion_point(field_get:onnx.NodeProto.input)
  return input_.Get(index);
}
inline ::std::string* NodeProto::mutable_input(int index) {
  // @@protoc_insertion_point(field_mutable:onnx.NodeProto.input)
  return input_.Mutable(index);
}
inline void NodeProto::set_input(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:onnx.NodeProto.input)
  input_.Mutable(index)->assign(value);
}
inline void NodeProto::set_input(int index, const char* value) {
  input_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:onnx.NodeProto.input)
}
inline void NodeProto::set_input(int index, const char* value, size_t size) {
  input_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:onnx.NodeProto.input)
}
inline ::std::string* NodeProto::add_input() {
  return input_.Add();
}
inline void NodeProto::add_input(const ::std::string& value) {
  input_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:onnx.NodeProto.input)
}
inline void NodeProto::add_input(const char* value) {
  input_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:onnx.NodeProto.input)
}
inline void NodeProto::add_input(const char* value, size_t size) {
  input_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:onnx.NodeProto.input)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
NodeProto::input() const {
  // @@protoc_insertion_point(field_list:onnx.NodeProto.input)
  return input_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
NodeProto::mutable_input() {
  // @@protoc_insertion_point(field_mutable_list:onnx.NodeProto.input)
  return &input_;
}

// repeated string output = 2;
inline int NodeProto::output_size() const {
  return output_.size();
}
inline void NodeProto::clear_output() {
  output_.Clear();
}
inline const ::std::string& NodeProto::output(int index) const {
  // @@protoc_insertion_point(field_get:onnx.NodeProto.output)
  return output_.Get(index);
}
inline ::std::string* NodeProto::mutable_output(int index) {
  // @@protoc_insertion_point(field_mutable:onnx.NodeProto.output)
  return output_.Mutable(index);
}
inline void NodeProto::set_output(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:onnx.NodeProto.output)
  output_.Mutable(index)->assign(value);
}
inline void NodeProto::set_output(int index, const char* value) {
  output_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:onnx.NodeProto.output)
}
inline void NodeProto::set_output(int index, const char* value, size_t size) {
  output_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:onnx.NodeProto.output)
}
inline ::std::string* NodeProto::add_output() {
  return output_.Add();
}
inline void NodeProto::add_output(const ::std::string& value) {
  output_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:onnx.NodeProto.output)
}
inline void NodeProto::add_output(const char* value) {
  output_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:onnx.NodeProto.output)
}
inline void NodeProto::add_output(const char* value, size_t size) {
  output_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:onnx.NodeProto.output)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
NodeProto::output() const {
  // @@protoc_insertion_point(field_list:onnx.NodeProto.output)
  return output_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
NodeProto::mutable_output() {
  // @@protoc_insertion_point(field_mutable_list:onnx.NodeProto.output)
  return &output_;
}

// optional string name = 3;
inline bool NodeProto::has_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NodeProto::set_has_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NodeProto::clear_has_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NodeProto::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& NodeProto::name() const {
  // @@protoc_insertion_point(field_get:onnx.NodeProto.name)
  return *name_;
}
inline void NodeProto::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:onnx.NodeProto.name)
}
inline void NodeProto::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:onnx.NodeProto.name)
}
inline void NodeProto::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:onnx.NodeProto.name)
}
inline ::std::string* NodeProto::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:onnx.NodeProto.name)
  return name_;
}
inline ::std::string* NodeProto::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void NodeProto::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:onnx.NodeProto.name)
}

// optional string op_type = 4;
inline bool NodeProto::has_op_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void NodeProto::set_has_op_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void NodeProto::clear_has_op_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void NodeProto::clear_op_type() {
  if (op_type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    op_type_->clear();
  }
  clear_has_op_type();
}
inline const ::std::string& NodeProto::op_type() const {
  // @@protoc_insertion_point(field_get:onnx.NodeProto.op_type)
  return *op_type_;
}
inline void NodeProto::set_op_type(const ::std::string& value) {
  set_has_op_type();
  if (op_type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    op_type_ = new ::std::string;
  }
  op_type_->assign(value);
  // @@protoc_insertion_point(field_set:onnx.NodeProto.op_type)
}
inline void NodeProto::set_op_type(const char* value) {
  set_has_op_type();
  if (op_type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    op_type_ = new ::std::string;
  }
  op_type_->assign(value);
  // @@protoc_insertion_point(field_set_char:onnx.NodeProto.op_type)
}
inline void NodeProto::set_op_type(const char* value, size_t size) {
  set_has_op_type();
  if (op_type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    op_type_ = new ::std::string;
  }
  op_type_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:onnx.NodeProto.op_type)
}
inline ::std::string* NodeProto::mutable_op_type() {
  set_has_op_type();
  if (op_type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    op_type_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:onnx.NodeProto.op_type)
  return op_type_;
}
inline ::std::string* NodeProto::release_op_type() {
  clear_has_op_type();
  if (op_type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = op_type_;
    op_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void NodeProto::set_allocated_op_type(::std::string* op_type) {
  if (op_type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete op_type_;
  }
  if (op_type) {
    set_has_op_type();
    op_type_ = op_type;
  } else {
    clear_has_op_type();
    op_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:onnx.NodeProto.op_type)
}

// optional string domain = 7;
inline bool NodeProto::has_domain() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void NodeProto::set_has_domain() {
  _has_bits_[0] |= 0x00000010u;
}
inline void NodeProto::clear_has_domain() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void NodeProto::clear_domain() {
  if (domain_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domain_->clear();
  }
  clear_has_domain();
}
inline const ::std::string& NodeProto::domain() const {
  // @@protoc_insertion_point(field_get:onnx.NodeProto.domain)
  return *domain_;
}
inline void NodeProto::set_domain(const ::std::string& value) {
  set_has_domain();
  if (domain_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domain_ = new ::std::string;
  }
  domain_->assign(value);
  // @@protoc_insertion_point(field_set:onnx.NodeProto.domain)
}
inline void NodeProto::set_domain(const char* value) {
  set_has_domain();
  if (domain_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domain_ = new ::std::string;
  }
  domain_->assign(value);
  // @@protoc_insertion_point(field_set_char:onnx.NodeProto.domain)
}
inline void NodeProto::set_domain(const char* value, size_t size) {
  set_has_domain();
  if (domain_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domain_ = new ::std::string;
  }
  domain_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:onnx.NodeProto.domain)
}
inline ::std::string* NodeProto::mutable_domain() {
  set_has_domain();
  if (domain_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domain_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:onnx.NodeProto.domain)
  return domain_;
}
inline ::std::string* NodeProto::release_domain() {
  clear_has_domain();
  if (domain_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = domain_;
    domain_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void NodeProto::set_allocated_domain(::std::string* domain) {
  if (domain_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete domain_;
  }
  if (domain) {
    set_has_domain();
    domain_ = domain;
  } else {
    clear_has_domain();
    domain_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:onnx.NodeProto.domain)
}

// repeated .onnx.AttributeProto attribute = 5;
inline int NodeProto::attribute_size() const {
  return attribute_.size();
}
inline void NodeProto::clear_attribute() {
  attribute_.Clear();
}
inline const ::onnx::AttributeProto& NodeProto::attribute(int index) const {
  // @@protoc_insertion_point(field_get:onnx.NodeProto.attribute)
  return attribute_.Get(index);
}
inline ::onnx::AttributeProto* NodeProto::mutable_attribute(int index) {
  // @@protoc_insertion_point(field_mutable:onnx.NodeProto.attribute)
  return attribute_.Mutable(index);
}
inline ::onnx::AttributeProto* NodeProto::add_attribute() {
  // @@protoc_insertion_point(field_add:onnx.NodeProto.attribute)
  return attribute_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::onnx::AttributeProto >&
NodeProto::attribute() const {
  // @@protoc_insertion_point(field_list:onnx.NodeProto.attribute)
  return attribute_;
}
inline ::google::protobuf::RepeatedPtrField< ::onnx::AttributeProto >*
NodeProto::mutable_attribute() {
  // @@protoc_insertion_point(field_mutable_list:onnx.NodeProto.attribute)
  return &attribute_;
}

// optional string doc_string = 6;
inline bool NodeProto::has_doc_string() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void NodeProto::set_has_doc_string() {
  _has_bits_[0] |= 0x00000040u;
}
inline void NodeProto::clear_has_doc_string() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void NodeProto::clear_doc_string() {
  if (doc_string_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    doc_string_->clear();
  }
  clear_has_doc_string();
}
inline const ::std::string& NodeProto::doc_string() const {
  // @@protoc_insertion_point(field_get:onnx.NodeProto.doc_string)
  return *doc_string_;
}
inline void NodeProto::set_doc_string(const ::std::string& value) {
  set_has_doc_string();
  if (doc_string_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    doc_string_ = new ::std::string;
  }
  doc_string_->assign(value);
  // @@protoc_insertion_point(field_set:onnx.NodeProto.doc_string)
}
inline void NodeProto::set_doc_string(const char* value) {
  set_has_doc_string();
  if (doc_string_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    doc_string_ = new ::std::string;
  }
  doc_string_->assign(value);
  // @@protoc_insertion_point(field_set_char:onnx.NodeProto.doc_string)
}
inline void NodeProto::set_doc_string(const char* value, size_t size) {
  set_has_doc_string();
  if (doc_string_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    doc_string_ = new ::std::string;
  }
  doc_string_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:onnx.NodeProto.doc_string)
}
inline ::std::string* NodeProto::mutable_doc_string() {
  set_has_doc_string();
  if (doc_string_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    doc_string_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:onnx.NodeProto.doc_string)
  return doc_string_;
}
inline ::std::string* NodeProto::release_doc_string() {
  clear_has_doc_string();
  if (doc_string_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = doc_string_;
    doc_string_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void NodeProto::set_allocated_doc_string(::std::string* doc_string) {
  if (doc_string_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete doc_string_;
  }
  if (doc_string) {
    set_has_doc_string();
    doc_string_ = doc_string;
  } else {
    clear_has_doc_string();
    doc_string_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:onnx.NodeProto.doc_string)
}

// -------------------------------------------------------------------

// ModelProto

// optional int64 ir_version = 1;
inline bool ModelProto::has_ir_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ModelProto::set_has_ir_version() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ModelProto::clear_has_ir_version() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ModelProto::clear_ir_version() {
  ir_version_ = GOOGLE_LONGLONG(0);
  clear_has_ir_version();
}
inline ::google::protobuf::int64 ModelProto::ir_version() const {
  // @@protoc_insertion_point(field_get:onnx.ModelProto.ir_version)
  return ir_version_;
}
inline void ModelProto::set_ir_version(::google::protobuf::int64 value) {
  set_has_ir_version();
  ir_version_ = value;
  // @@protoc_insertion_point(field_set:onnx.ModelProto.ir_version)
}

// repeated .onnx.OperatorSetIdProto opset_import = 8;
inline int ModelProto::opset_import_size() const {
  return opset_import_.size();
}
inline void ModelProto::clear_opset_import() {
  opset_import_.Clear();
}
inline const ::onnx::OperatorSetIdProto& ModelProto::opset_import(int index) const {
  // @@protoc_insertion_point(field_get:onnx.ModelProto.opset_import)
  return opset_import_.Get(index);
}
inline ::onnx::OperatorSetIdProto* ModelProto::mutable_opset_import(int index) {
  // @@protoc_insertion_point(field_mutable:onnx.ModelProto.opset_import)
  return opset_import_.Mutable(index);
}
inline ::onnx::OperatorSetIdProto* ModelProto::add_opset_import() {
  // @@protoc_insertion_point(field_add:onnx.ModelProto.opset_import)
  return opset_import_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::onnx::OperatorSetIdProto >&
ModelProto::opset_import() const {
  // @@protoc_insertion_point(field_list:onnx.ModelProto.opset_import)
  return opset_import_;
}
inline ::google::protobuf::RepeatedPtrField< ::onnx::OperatorSetIdProto >*
ModelProto::mutable_opset_import() {
  // @@protoc_insertion_point(field_mutable_list:onnx.ModelProto.opset_import)
  return &opset_import_;
}

// optional string producer_name = 2;
inline bool ModelProto::has_producer_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ModelProto::set_has_producer_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ModelProto::clear_has_producer_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ModelProto::clear_producer_name() {
  if (producer_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    producer_name_->clear();
  }
  clear_has_producer_name();
}
inline const ::std::string& ModelProto::producer_name() const {
  // @@protoc_insertion_point(field_get:onnx.ModelProto.producer_name)
  return *producer_name_;
}
inline void ModelProto::set_producer_name(const ::std::string& value) {
  set_has_producer_name();
  if (producer_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    producer_name_ = new ::std::string;
  }
  producer_name_->assign(value);
  // @@protoc_insertion_point(field_set:onnx.ModelProto.producer_name)
}
inline void ModelProto::set_producer_name(const char* value) {
  set_has_producer_name();
  if (producer_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    producer_name_ = new ::std::string;
  }
  producer_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:onnx.ModelProto.producer_name)
}
inline void ModelProto::set_producer_name(const char* value, size_t size) {
  set_has_producer_name();
  if (producer_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    producer_name_ = new ::std::string;
  }
  producer_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:onnx.ModelProto.producer_name)
}
inline ::std::string* ModelProto::mutable_producer_name() {
  set_has_producer_name();
  if (producer_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    producer_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:onnx.ModelProto.producer_name)
  return producer_name_;
}
inline ::std::string* ModelProto::release_producer_name() {
  clear_has_producer_name();
  if (producer_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = producer_name_;
    producer_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ModelProto::set_allocated_producer_name(::std::string* producer_name) {
  if (producer_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete producer_name_;
  }
  if (producer_name) {
    set_has_producer_name();
    producer_name_ = producer_name;
  } else {
    clear_has_producer_name();
    producer_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:onnx.ModelProto.producer_name)
}

// optional string producer_version = 3;
inline bool ModelProto::has_producer_version() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ModelProto::set_has_producer_version() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ModelProto::clear_has_producer_version() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ModelProto::clear_producer_version() {
  if (producer_version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    producer_version_->clear();
  }
  clear_has_producer_version();
}
inline const ::std::string& ModelProto::producer_version() const {
  // @@protoc_insertion_point(field_get:onnx.ModelProto.producer_version)
  return *producer_version_;
}
inline void ModelProto::set_producer_version(const ::std::string& value) {
  set_has_producer_version();
  if (producer_version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    producer_version_ = new ::std::string;
  }
  producer_version_->assign(value);
  // @@protoc_insertion_point(field_set:onnx.ModelProto.producer_version)
}
inline void ModelProto::set_producer_version(const char* value) {
  set_has_producer_version();
  if (producer_version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    producer_version_ = new ::std::string;
  }
  producer_version_->assign(value);
  // @@protoc_insertion_point(field_set_char:onnx.ModelProto.producer_version)
}
inline void ModelProto::set_producer_version(const char* value, size_t size) {
  set_has_producer_version();
  if (producer_version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    producer_version_ = new ::std::string;
  }
  producer_version_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:onnx.ModelProto.producer_version)
}
inline ::std::string* ModelProto::mutable_producer_version() {
  set_has_producer_version();
  if (producer_version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    producer_version_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:onnx.ModelProto.producer_version)
  return producer_version_;
}
inline ::std::string* ModelProto::release_producer_version() {
  clear_has_producer_version();
  if (producer_version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = producer_version_;
    producer_version_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ModelProto::set_allocated_producer_version(::std::string* producer_version) {
  if (producer_version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete producer_version_;
  }
  if (producer_version) {
    set_has_producer_version();
    producer_version_ = producer_version;
  } else {
    clear_has_producer_version();
    producer_version_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:onnx.ModelProto.producer_version)
}

// optional string domain = 4;
inline bool ModelProto::has_domain() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ModelProto::set_has_domain() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ModelProto::clear_has_domain() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ModelProto::clear_domain() {
  if (domain_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domain_->clear();
  }
  clear_has_domain();
}
inline const ::std::string& ModelProto::domain() const {
  // @@protoc_insertion_point(field_get:onnx.ModelProto.domain)
  return *domain_;
}
inline void ModelProto::set_domain(const ::std::string& value) {
  set_has_domain();
  if (domain_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domain_ = new ::std::string;
  }
  domain_->assign(value);
  // @@protoc_insertion_point(field_set:onnx.ModelProto.domain)
}
inline void ModelProto::set_domain(const char* value) {
  set_has_domain();
  if (domain_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domain_ = new ::std::string;
  }
  domain_->assign(value);
  // @@protoc_insertion_point(field_set_char:onnx.ModelProto.domain)
}
inline void ModelProto::set_domain(const char* value, size_t size) {
  set_has_domain();
  if (domain_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domain_ = new ::std::string;
  }
  domain_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:onnx.ModelProto.domain)
}
inline ::std::string* ModelProto::mutable_domain() {
  set_has_domain();
  if (domain_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domain_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:onnx.ModelProto.domain)
  return domain_;
}
inline ::std::string* ModelProto::release_domain() {
  clear_has_domain();
  if (domain_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = domain_;
    domain_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ModelProto::set_allocated_domain(::std::string* domain) {
  if (domain_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete domain_;
  }
  if (domain) {
    set_has_domain();
    domain_ = domain;
  } else {
    clear_has_domain();
    domain_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:onnx.ModelProto.domain)
}

// optional int64 model_version = 5;
inline bool ModelProto::has_model_version() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ModelProto::set_has_model_version() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ModelProto::clear_has_model_version() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ModelProto::clear_model_version() {
  model_version_ = GOOGLE_LONGLONG(0);
  clear_has_model_version();
}
inline ::google::protobuf::int64 ModelProto::model_version() const {
  // @@protoc_insertion_point(field_get:onnx.ModelProto.model_version)
  return model_version_;
}
inline void ModelProto::set_model_version(::google::protobuf::int64 value) {
  set_has_model_version();
  model_version_ = value;
  // @@protoc_insertion_point(field_set:onnx.ModelProto.model_version)
}

// optional string doc_string = 6;
inline bool ModelProto::has_doc_string() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ModelProto::set_has_doc_string() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ModelProto::clear_has_doc_string() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ModelProto::clear_doc_string() {
  if (doc_string_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    doc_string_->clear();
  }
  clear_has_doc_string();
}
inline const ::std::string& ModelProto::doc_string() const {
  // @@protoc_insertion_point(field_get:onnx.ModelProto.doc_string)
  return *doc_string_;
}
inline void ModelProto::set_doc_string(const ::std::string& value) {
  set_has_doc_string();
  if (doc_string_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    doc_string_ = new ::std::string;
  }
  doc_string_->assign(value);
  // @@protoc_insertion_point(field_set:onnx.ModelProto.doc_string)
}
inline void ModelProto::set_doc_string(const char* value) {
  set_has_doc_string();
  if (doc_string_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    doc_string_ = new ::std::string;
  }
  doc_string_->assign(value);
  // @@protoc_insertion_point(field_set_char:onnx.ModelProto.doc_string)
}
inline void ModelProto::set_doc_string(const char* value, size_t size) {
  set_has_doc_string();
  if (doc_string_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    doc_string_ = new ::std::string;
  }
  doc_string_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:onnx.ModelProto.doc_string)
}
inline ::std::string* ModelProto::mutable_doc_string() {
  set_has_doc_string();
  if (doc_string_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    doc_string_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:onnx.ModelProto.doc_string)
  return doc_string_;
}
inline ::std::string* ModelProto::release_doc_string() {
  clear_has_doc_string();
  if (doc_string_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = doc_string_;
    doc_string_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ModelProto::set_allocated_doc_string(::std::string* doc_string) {
  if (doc_string_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete doc_string_;
  }
  if (doc_string) {
    set_has_doc_string();
    doc_string_ = doc_string;
  } else {
    clear_has_doc_string();
    doc_string_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:onnx.ModelProto.doc_string)
}

// optional .onnx.GraphProto graph = 7;
inline bool ModelProto::has_graph() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ModelProto::set_has_graph() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ModelProto::clear_has_graph() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ModelProto::clear_graph() {
  if (graph_ != NULL) graph_->::onnx::GraphProto::Clear();
  clear_has_graph();
}
inline const ::onnx::GraphProto& ModelProto::graph() const {
  // @@protoc_insertion_point(field_get:onnx.ModelProto.graph)
  return graph_ != NULL ? *graph_ : *default_instance_->graph_;
}
inline ::onnx::GraphProto* ModelProto::mutable_graph() {
  set_has_graph();
  if (graph_ == NULL) graph_ = new ::onnx::GraphProto;
  // @@protoc_insertion_point(field_mutable:onnx.ModelProto.graph)
  return graph_;
}
inline ::onnx::GraphProto* ModelProto::release_graph() {
  clear_has_graph();
  ::onnx::GraphProto* temp = graph_;
  graph_ = NULL;
  return temp;
}
inline void ModelProto::set_allocated_graph(::onnx::GraphProto* graph) {
  delete graph_;
  graph_ = graph;
  if (graph) {
    set_has_graph();
  } else {
    clear_has_graph();
  }
  // @@protoc_insertion_point(field_set_allocated:onnx.ModelProto.graph)
}

// repeated .onnx.StringStringEntryProto metadata_props = 14;
inline int ModelProto::metadata_props_size() const {
  return metadata_props_.size();
}
inline void ModelProto::clear_metadata_props() {
  metadata_props_.Clear();
}
inline const ::onnx::StringStringEntryProto& ModelProto::metadata_props(int index) const {
  // @@protoc_insertion_point(field_get:onnx.ModelProto.metadata_props)
  return metadata_props_.Get(index);
}
inline ::onnx::StringStringEntryProto* ModelProto::mutable_metadata_props(int index) {
  // @@protoc_insertion_point(field_mutable:onnx.ModelProto.metadata_props)
  return metadata_props_.Mutable(index);
}
inline ::onnx::StringStringEntryProto* ModelProto::add_metadata_props() {
  // @@protoc_insertion_point(field_add:onnx.ModelProto.metadata_props)
  return metadata_props_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::onnx::StringStringEntryProto >&
ModelProto::metadata_props() const {
  // @@protoc_insertion_point(field_list:onnx.ModelProto.metadata_props)
  return metadata_props_;
}
inline ::google::protobuf::RepeatedPtrField< ::onnx::StringStringEntryProto >*
ModelProto::mutable_metadata_props() {
  // @@protoc_insertion_point(field_mutable_list:onnx.ModelProto.metadata_props)
  return &metadata_props_;
}

// -------------------------------------------------------------------

// StringStringEntryProto

// optional string key = 1;
inline bool StringStringEntryProto::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StringStringEntryProto::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StringStringEntryProto::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StringStringEntryProto::clear_key() {
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_->clear();
  }
  clear_has_key();
}
inline const ::std::string& StringStringEntryProto::key() const {
  // @@protoc_insertion_point(field_get:onnx.StringStringEntryProto.key)
  return *key_;
}
inline void StringStringEntryProto::set_key(const ::std::string& value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  key_->assign(value);
  // @@protoc_insertion_point(field_set:onnx.StringStringEntryProto.key)
}
inline void StringStringEntryProto::set_key(const char* value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  key_->assign(value);
  // @@protoc_insertion_point(field_set_char:onnx.StringStringEntryProto.key)
}
inline void StringStringEntryProto::set_key(const char* value, size_t size) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  key_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:onnx.StringStringEntryProto.key)
}
inline ::std::string* StringStringEntryProto::mutable_key() {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:onnx.StringStringEntryProto.key)
  return key_;
}
inline ::std::string* StringStringEntryProto::release_key() {
  clear_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = key_;
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void StringStringEntryProto::set_allocated_key(::std::string* key) {
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete key_;
  }
  if (key) {
    set_has_key();
    key_ = key;
  } else {
    clear_has_key();
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:onnx.StringStringEntryProto.key)
}

// optional string value = 2;
inline bool StringStringEntryProto::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StringStringEntryProto::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StringStringEntryProto::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StringStringEntryProto::clear_value() {
  if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_->clear();
  }
  clear_has_value();
}
inline const ::std::string& StringStringEntryProto::value() const {
  // @@protoc_insertion_point(field_get:onnx.StringStringEntryProto.value)
  return *value_;
}
inline void StringStringEntryProto::set_value(const ::std::string& value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_ = new ::std::string;
  }
  value_->assign(value);
  // @@protoc_insertion_point(field_set:onnx.StringStringEntryProto.value)
}
inline void StringStringEntryProto::set_value(const char* value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_ = new ::std::string;
  }
  value_->assign(value);
  // @@protoc_insertion_point(field_set_char:onnx.StringStringEntryProto.value)
}
inline void StringStringEntryProto::set_value(const char* value, size_t size) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_ = new ::std::string;
  }
  value_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:onnx.StringStringEntryProto.value)
}
inline ::std::string* StringStringEntryProto::mutable_value() {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:onnx.StringStringEntryProto.value)
  return value_;
}
inline ::std::string* StringStringEntryProto::release_value() {
  clear_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = value_;
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void StringStringEntryProto::set_allocated_value(::std::string* value) {
  if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete value_;
  }
  if (value) {
    set_has_value();
    value_ = value;
  } else {
    clear_has_value();
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:onnx.StringStringEntryProto.value)
}

// -------------------------------------------------------------------

// TensorAnnotation

// optional string tensor_name = 1;
inline bool TensorAnnotation::has_tensor_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TensorAnnotation::set_has_tensor_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TensorAnnotation::clear_has_tensor_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TensorAnnotation::clear_tensor_name() {
  if (tensor_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tensor_name_->clear();
  }
  clear_has_tensor_name();
}
inline const ::std::string& TensorAnnotation::tensor_name() const {
  // @@protoc_insertion_point(field_get:onnx.TensorAnnotation.tensor_name)
  return *tensor_name_;
}
inline void TensorAnnotation::set_tensor_name(const ::std::string& value) {
  set_has_tensor_name();
  if (tensor_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tensor_name_ = new ::std::string;
  }
  tensor_name_->assign(value);
  // @@protoc_insertion_point(field_set:onnx.TensorAnnotation.tensor_name)
}
inline void TensorAnnotation::set_tensor_name(const char* value) {
  set_has_tensor_name();
  if (tensor_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tensor_name_ = new ::std::string;
  }
  tensor_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:onnx.TensorAnnotation.tensor_name)
}
inline void TensorAnnotation::set_tensor_name(const char* value, size_t size) {
  set_has_tensor_name();
  if (tensor_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tensor_name_ = new ::std::string;
  }
  tensor_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:onnx.TensorAnnotation.tensor_name)
}
inline ::std::string* TensorAnnotation::mutable_tensor_name() {
  set_has_tensor_name();
  if (tensor_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tensor_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:onnx.TensorAnnotation.tensor_name)
  return tensor_name_;
}
inline ::std::string* TensorAnnotation::release_tensor_name() {
  clear_has_tensor_name();
  if (tensor_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = tensor_name_;
    tensor_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TensorAnnotation::set_allocated_tensor_name(::std::string* tensor_name) {
  if (tensor_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete tensor_name_;
  }
  if (tensor_name) {
    set_has_tensor_name();
    tensor_name_ = tensor_name;
  } else {
    clear_has_tensor_name();
    tensor_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:onnx.TensorAnnotation.tensor_name)
}

// repeated .onnx.StringStringEntryProto quant_parameter_tensor_names = 2;
inline int TensorAnnotation::quant_parameter_tensor_names_size() const {
  return quant_parameter_tensor_names_.size();
}
inline void TensorAnnotation::clear_quant_parameter_tensor_names() {
  quant_parameter_tensor_names_.Clear();
}
inline const ::onnx::StringStringEntryProto& TensorAnnotation::quant_parameter_tensor_names(int index) const {
  // @@protoc_insertion_point(field_get:onnx.TensorAnnotation.quant_parameter_tensor_names)
  return quant_parameter_tensor_names_.Get(index);
}
inline ::onnx::StringStringEntryProto* TensorAnnotation::mutable_quant_parameter_tensor_names(int index) {
  // @@protoc_insertion_point(field_mutable:onnx.TensorAnnotation.quant_parameter_tensor_names)
  return quant_parameter_tensor_names_.Mutable(index);
}
inline ::onnx::StringStringEntryProto* TensorAnnotation::add_quant_parameter_tensor_names() {
  // @@protoc_insertion_point(field_add:onnx.TensorAnnotation.quant_parameter_tensor_names)
  return quant_parameter_tensor_names_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::onnx::StringStringEntryProto >&
TensorAnnotation::quant_parameter_tensor_names() const {
  // @@protoc_insertion_point(field_list:onnx.TensorAnnotation.quant_parameter_tensor_names)
  return quant_parameter_tensor_names_;
}
inline ::google::protobuf::RepeatedPtrField< ::onnx::StringStringEntryProto >*
TensorAnnotation::mutable_quant_parameter_tensor_names() {
  // @@protoc_insertion_point(field_mutable_list:onnx.TensorAnnotation.quant_parameter_tensor_names)
  return &quant_parameter_tensor_names_;
}

// -------------------------------------------------------------------

// GraphProto

// repeated .onnx.NodeProto node = 1;
inline int GraphProto::node_size() const {
  return node_.size();
}
inline void GraphProto::clear_node() {
  node_.Clear();
}
inline const ::onnx::NodeProto& GraphProto::node(int index) const {
  // @@protoc_insertion_point(field_get:onnx.GraphProto.node)
  return node_.Get(index);
}
inline ::onnx::NodeProto* GraphProto::mutable_node(int index) {
  // @@protoc_insertion_point(field_mutable:onnx.GraphProto.node)
  return node_.Mutable(index);
}
inline ::onnx::NodeProto* GraphProto::add_node() {
  // @@protoc_insertion_point(field_add:onnx.GraphProto.node)
  return node_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::onnx::NodeProto >&
GraphProto::node() const {
  // @@protoc_insertion_point(field_list:onnx.GraphProto.node)
  return node_;
}
inline ::google::protobuf::RepeatedPtrField< ::onnx::NodeProto >*
GraphProto::mutable_node() {
  // @@protoc_insertion_point(field_mutable_list:onnx.GraphProto.node)
  return &node_;
}

// optional string name = 2;
inline bool GraphProto::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GraphProto::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GraphProto::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GraphProto::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& GraphProto::name() const {
  // @@protoc_insertion_point(field_get:onnx.GraphProto.name)
  return *name_;
}
inline void GraphProto::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:onnx.GraphProto.name)
}
inline void GraphProto::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:onnx.GraphProto.name)
}
inline void GraphProto::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:onnx.GraphProto.name)
}
inline ::std::string* GraphProto::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:onnx.GraphProto.name)
  return name_;
}
inline ::std::string* GraphProto::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void GraphProto::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:onnx.GraphProto.name)
}

// repeated .onnx.TensorProto initializer = 5;
inline int GraphProto::initializer_size() const {
  return initializer_.size();
}
inline void GraphProto::clear_initializer() {
  initializer_.Clear();
}
inline const ::onnx::TensorProto& GraphProto::initializer(int index) const {
  // @@protoc_insertion_point(field_get:onnx.GraphProto.initializer)
  return initializer_.Get(index);
}
inline ::onnx::TensorProto* GraphProto::mutable_initializer(int index) {
  // @@protoc_insertion_point(field_mutable:onnx.GraphProto.initializer)
  return initializer_.Mutable(index);
}
inline ::onnx::TensorProto* GraphProto::add_initializer() {
  // @@protoc_insertion_point(field_add:onnx.GraphProto.initializer)
  return initializer_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::onnx::TensorProto >&
GraphProto::initializer() const {
  // @@protoc_insertion_point(field_list:onnx.GraphProto.initializer)
  return initializer_;
}
inline ::google::protobuf::RepeatedPtrField< ::onnx::TensorProto >*
GraphProto::mutable_initializer() {
  // @@protoc_insertion_point(field_mutable_list:onnx.GraphProto.initializer)
  return &initializer_;
}

// optional string doc_string = 10;
inline bool GraphProto::has_doc_string() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GraphProto::set_has_doc_string() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GraphProto::clear_has_doc_string() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GraphProto::clear_doc_string() {
  if (doc_string_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    doc_string_->clear();
  }
  clear_has_doc_string();
}
inline const ::std::string& GraphProto::doc_string() const {
  // @@protoc_insertion_point(field_get:onnx.GraphProto.doc_string)
  return *doc_string_;
}
inline void GraphProto::set_doc_string(const ::std::string& value) {
  set_has_doc_string();
  if (doc_string_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    doc_string_ = new ::std::string;
  }
  doc_string_->assign(value);
  // @@protoc_insertion_point(field_set:onnx.GraphProto.doc_string)
}
inline void GraphProto::set_doc_string(const char* value) {
  set_has_doc_string();
  if (doc_string_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    doc_string_ = new ::std::string;
  }
  doc_string_->assign(value);
  // @@protoc_insertion_point(field_set_char:onnx.GraphProto.doc_string)
}
inline void GraphProto::set_doc_string(const char* value, size_t size) {
  set_has_doc_string();
  if (doc_string_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    doc_string_ = new ::std::string;
  }
  doc_string_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:onnx.GraphProto.doc_string)
}
inline ::std::string* GraphProto::mutable_doc_string() {
  set_has_doc_string();
  if (doc_string_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    doc_string_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:onnx.GraphProto.doc_string)
  return doc_string_;
}
inline ::std::string* GraphProto::release_doc_string() {
  clear_has_doc_string();
  if (doc_string_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = doc_string_;
    doc_string_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void GraphProto::set_allocated_doc_string(::std::string* doc_string) {
  if (doc_string_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete doc_string_;
  }
  if (doc_string) {
    set_has_doc_string();
    doc_string_ = doc_string;
  } else {
    clear_has_doc_string();
    doc_string_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:onnx.GraphProto.doc_string)
}

// repeated .onnx.ValueInfoProto input = 11;
inline int GraphProto::input_size() const {
  return input_.size();
}
inline void GraphProto::clear_input() {
  input_.Clear();
}
inline const ::onnx::ValueInfoProto& GraphProto::input(int index) const {
  // @@protoc_insertion_point(field_get:onnx.GraphProto.input)
  return input_.Get(index);
}
inline ::onnx::ValueInfoProto* GraphProto::mutable_input(int index) {
  // @@protoc_insertion_point(field_mutable:onnx.GraphProto.input)
  return input_.Mutable(index);
}
inline ::onnx::ValueInfoProto* GraphProto::add_input() {
  // @@protoc_insertion_point(field_add:onnx.GraphProto.input)
  return input_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::onnx::ValueInfoProto >&
GraphProto::input() const {
  // @@protoc_insertion_point(field_list:onnx.GraphProto.input)
  return input_;
}
inline ::google::protobuf::RepeatedPtrField< ::onnx::ValueInfoProto >*
GraphProto::mutable_input() {
  // @@protoc_insertion_point(field_mutable_list:onnx.GraphProto.input)
  return &input_;
}

// repeated .onnx.ValueInfoProto output = 12;
inline int GraphProto::output_size() const {
  return output_.size();
}
inline void GraphProto::clear_output() {
  output_.Clear();
}
inline const ::onnx::ValueInfoProto& GraphProto::output(int index) const {
  // @@protoc_insertion_point(field_get:onnx.GraphProto.output)
  return output_.Get(index);
}
inline ::onnx::ValueInfoProto* GraphProto::mutable_output(int index) {
  // @@protoc_insertion_point(field_mutable:onnx.GraphProto.output)
  return output_.Mutable(index);
}
inline ::onnx::ValueInfoProto* GraphProto::add_output() {
  // @@protoc_insertion_point(field_add:onnx.GraphProto.output)
  return output_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::onnx::ValueInfoProto >&
GraphProto::output() const {
  // @@protoc_insertion_point(field_list:onnx.GraphProto.output)
  return output_;
}
inline ::google::protobuf::RepeatedPtrField< ::onnx::ValueInfoProto >*
GraphProto::mutable_output() {
  // @@protoc_insertion_point(field_mutable_list:onnx.GraphProto.output)
  return &output_;
}

// repeated .onnx.ValueInfoProto value_info = 13;
inline int GraphProto::value_info_size() const {
  return value_info_.size();
}
inline void GraphProto::clear_value_info() {
  value_info_.Clear();
}
inline const ::onnx::ValueInfoProto& GraphProto::value_info(int index) const {
  // @@protoc_insertion_point(field_get:onnx.GraphProto.value_info)
  return value_info_.Get(index);
}
inline ::onnx::ValueInfoProto* GraphProto::mutable_value_info(int index) {
  // @@protoc_insertion_point(field_mutable:onnx.GraphProto.value_info)
  return value_info_.Mutable(index);
}
inline ::onnx::ValueInfoProto* GraphProto::add_value_info() {
  // @@protoc_insertion_point(field_add:onnx.GraphProto.value_info)
  return value_info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::onnx::ValueInfoProto >&
GraphProto::value_info() const {
  // @@protoc_insertion_point(field_list:onnx.GraphProto.value_info)
  return value_info_;
}
inline ::google::protobuf::RepeatedPtrField< ::onnx::ValueInfoProto >*
GraphProto::mutable_value_info() {
  // @@protoc_insertion_point(field_mutable_list:onnx.GraphProto.value_info)
  return &value_info_;
}

// repeated .onnx.TensorAnnotation quantization_annotation = 14;
inline int GraphProto::quantization_annotation_size() const {
  return quantization_annotation_.size();
}
inline void GraphProto::clear_quantization_annotation() {
  quantization_annotation_.Clear();
}
inline const ::onnx::TensorAnnotation& GraphProto::quantization_annotation(int index) const {
  // @@protoc_insertion_point(field_get:onnx.GraphProto.quantization_annotation)
  return quantization_annotation_.Get(index);
}
inline ::onnx::TensorAnnotation* GraphProto::mutable_quantization_annotation(int index) {
  // @@protoc_insertion_point(field_mutable:onnx.GraphProto.quantization_annotation)
  return quantization_annotation_.Mutable(index);
}
inline ::onnx::TensorAnnotation* GraphProto::add_quantization_annotation() {
  // @@protoc_insertion_point(field_add:onnx.GraphProto.quantization_annotation)
  return quantization_annotation_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::onnx::TensorAnnotation >&
GraphProto::quantization_annotation() const {
  // @@protoc_insertion_point(field_list:onnx.GraphProto.quantization_annotation)
  return quantization_annotation_;
}
inline ::google::protobuf::RepeatedPtrField< ::onnx::TensorAnnotation >*
GraphProto::mutable_quantization_annotation() {
  // @@protoc_insertion_point(field_mutable_list:onnx.GraphProto.quantization_annotation)
  return &quantization_annotation_;
}

// -------------------------------------------------------------------

// TensorProto_Segment

// optional int64 begin = 1;
inline bool TensorProto_Segment::has_begin() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TensorProto_Segment::set_has_begin() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TensorProto_Segment::clear_has_begin() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TensorProto_Segment::clear_begin() {
  begin_ = GOOGLE_LONGLONG(0);
  clear_has_begin();
}
inline ::google::protobuf::int64 TensorProto_Segment::begin() const {
  // @@protoc_insertion_point(field_get:onnx.TensorProto.Segment.begin)
  return begin_;
}
inline void TensorProto_Segment::set_begin(::google::protobuf::int64 value) {
  set_has_begin();
  begin_ = value;
  // @@protoc_insertion_point(field_set:onnx.TensorProto.Segment.begin)
}

// optional int64 end = 2;
inline bool TensorProto_Segment::has_end() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TensorProto_Segment::set_has_end() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TensorProto_Segment::clear_has_end() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TensorProto_Segment::clear_end() {
  end_ = GOOGLE_LONGLONG(0);
  clear_has_end();
}
inline ::google::protobuf::int64 TensorProto_Segment::end() const {
  // @@protoc_insertion_point(field_get:onnx.TensorProto.Segment.end)
  return end_;
}
inline void TensorProto_Segment::set_end(::google::protobuf::int64 value) {
  set_has_end();
  end_ = value;
  // @@protoc_insertion_point(field_set:onnx.TensorProto.Segment.end)
}

// -------------------------------------------------------------------

// TensorProto

// repeated int64 dims = 1;
inline int TensorProto::dims_size() const {
  return dims_.size();
}
inline void TensorProto::clear_dims() {
  dims_.Clear();
}
inline ::google::protobuf::int64 TensorProto::dims(int index) const {
  // @@protoc_insertion_point(field_get:onnx.TensorProto.dims)
  return dims_.Get(index);
}
inline void TensorProto::set_dims(int index, ::google::protobuf::int64 value) {
  dims_.Set(index, value);
  // @@protoc_insertion_point(field_set:onnx.TensorProto.dims)
}
inline void TensorProto::add_dims(::google::protobuf::int64 value) {
  dims_.Add(value);
  // @@protoc_insertion_point(field_add:onnx.TensorProto.dims)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
TensorProto::dims() const {
  // @@protoc_insertion_point(field_list:onnx.TensorProto.dims)
  return dims_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
TensorProto::mutable_dims() {
  // @@protoc_insertion_point(field_mutable_list:onnx.TensorProto.dims)
  return &dims_;
}

// optional int32 data_type = 2;
inline bool TensorProto::has_data_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TensorProto::set_has_data_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TensorProto::clear_has_data_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TensorProto::clear_data_type() {
  data_type_ = 0;
  clear_has_data_type();
}
inline ::google::protobuf::int32 TensorProto::data_type() const {
  // @@protoc_insertion_point(field_get:onnx.TensorProto.data_type)
  return data_type_;
}
inline void TensorProto::set_data_type(::google::protobuf::int32 value) {
  set_has_data_type();
  data_type_ = value;
  // @@protoc_insertion_point(field_set:onnx.TensorProto.data_type)
}

// optional .onnx.TensorProto.Segment segment = 3;
inline bool TensorProto::has_segment() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TensorProto::set_has_segment() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TensorProto::clear_has_segment() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TensorProto::clear_segment() {
  if (segment_ != NULL) segment_->::onnx::TensorProto_Segment::Clear();
  clear_has_segment();
}
inline const ::onnx::TensorProto_Segment& TensorProto::segment() const {
  // @@protoc_insertion_point(field_get:onnx.TensorProto.segment)
  return segment_ != NULL ? *segment_ : *default_instance_->segment_;
}
inline ::onnx::TensorProto_Segment* TensorProto::mutable_segment() {
  set_has_segment();
  if (segment_ == NULL) segment_ = new ::onnx::TensorProto_Segment;
  // @@protoc_insertion_point(field_mutable:onnx.TensorProto.segment)
  return segment_;
}
inline ::onnx::TensorProto_Segment* TensorProto::release_segment() {
  clear_has_segment();
  ::onnx::TensorProto_Segment* temp = segment_;
  segment_ = NULL;
  return temp;
}
inline void TensorProto::set_allocated_segment(::onnx::TensorProto_Segment* segment) {
  delete segment_;
  segment_ = segment;
  if (segment) {
    set_has_segment();
  } else {
    clear_has_segment();
  }
  // @@protoc_insertion_point(field_set_allocated:onnx.TensorProto.segment)
}

// repeated float float_data = 4 [packed = true];
inline int TensorProto::float_data_size() const {
  return float_data_.size();
}
inline void TensorProto::clear_float_data() {
  float_data_.Clear();
}
inline float TensorProto::float_data(int index) const {
  // @@protoc_insertion_point(field_get:onnx.TensorProto.float_data)
  return float_data_.Get(index);
}
inline void TensorProto::set_float_data(int index, float value) {
  float_data_.Set(index, value);
  // @@protoc_insertion_point(field_set:onnx.TensorProto.float_data)
}
inline void TensorProto::add_float_data(float value) {
  float_data_.Add(value);
  // @@protoc_insertion_point(field_add:onnx.TensorProto.float_data)
}
inline const ::google::protobuf::RepeatedField< float >&
TensorProto::float_data() const {
  // @@protoc_insertion_point(field_list:onnx.TensorProto.float_data)
  return float_data_;
}
inline ::google::protobuf::RepeatedField< float >*
TensorProto::mutable_float_data() {
  // @@protoc_insertion_point(field_mutable_list:onnx.TensorProto.float_data)
  return &float_data_;
}

// repeated int32 int32_data = 5 [packed = true];
inline int TensorProto::int32_data_size() const {
  return int32_data_.size();
}
inline void TensorProto::clear_int32_data() {
  int32_data_.Clear();
}
inline ::google::protobuf::int32 TensorProto::int32_data(int index) const {
  // @@protoc_insertion_point(field_get:onnx.TensorProto.int32_data)
  return int32_data_.Get(index);
}
inline void TensorProto::set_int32_data(int index, ::google::protobuf::int32 value) {
  int32_data_.Set(index, value);
  // @@protoc_insertion_point(field_set:onnx.TensorProto.int32_data)
}
inline void TensorProto::add_int32_data(::google::protobuf::int32 value) {
  int32_data_.Add(value);
  // @@protoc_insertion_point(field_add:onnx.TensorProto.int32_data)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
TensorProto::int32_data() const {
  // @@protoc_insertion_point(field_list:onnx.TensorProto.int32_data)
  return int32_data_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
TensorProto::mutable_int32_data() {
  // @@protoc_insertion_point(field_mutable_list:onnx.TensorProto.int32_data)
  return &int32_data_;
}

// repeated bytes string_data = 6;
inline int TensorProto::string_data_size() const {
  return string_data_.size();
}
inline void TensorProto::clear_string_data() {
  string_data_.Clear();
}
inline const ::std::string& TensorProto::string_data(int index) const {
  // @@protoc_insertion_point(field_get:onnx.TensorProto.string_data)
  return string_data_.Get(index);
}
inline ::std::string* TensorProto::mutable_string_data(int index) {
  // @@protoc_insertion_point(field_mutable:onnx.TensorProto.string_data)
  return string_data_.Mutable(index);
}
inline void TensorProto::set_string_data(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:onnx.TensorProto.string_data)
  string_data_.Mutable(index)->assign(value);
}
inline void TensorProto::set_string_data(int index, const char* value) {
  string_data_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:onnx.TensorProto.string_data)
}
inline void TensorProto::set_string_data(int index, const void* value, size_t size) {
  string_data_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:onnx.TensorProto.string_data)
}
inline ::std::string* TensorProto::add_string_data() {
  return string_data_.Add();
}
inline void TensorProto::add_string_data(const ::std::string& value) {
  string_data_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:onnx.TensorProto.string_data)
}
inline void TensorProto::add_string_data(const char* value) {
  string_data_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:onnx.TensorProto.string_data)
}
inline void TensorProto::add_string_data(const void* value, size_t size) {
  string_data_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:onnx.TensorProto.string_data)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
TensorProto::string_data() const {
  // @@protoc_insertion_point(field_list:onnx.TensorProto.string_data)
  return string_data_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
TensorProto::mutable_string_data() {
  // @@protoc_insertion_point(field_mutable_list:onnx.TensorProto.string_data)
  return &string_data_;
}

// repeated int64 int64_data = 7 [packed = true];
inline int TensorProto::int64_data_size() const {
  return int64_data_.size();
}
inline void TensorProto::clear_int64_data() {
  int64_data_.Clear();
}
inline ::google::protobuf::int64 TensorProto::int64_data(int index) const {
  // @@protoc_insertion_point(field_get:onnx.TensorProto.int64_data)
  return int64_data_.Get(index);
}
inline void TensorProto::set_int64_data(int index, ::google::protobuf::int64 value) {
  int64_data_.Set(index, value);
  // @@protoc_insertion_point(field_set:onnx.TensorProto.int64_data)
}
inline void TensorProto::add_int64_data(::google::protobuf::int64 value) {
  int64_data_.Add(value);
  // @@protoc_insertion_point(field_add:onnx.TensorProto.int64_data)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
TensorProto::int64_data() const {
  // @@protoc_insertion_point(field_list:onnx.TensorProto.int64_data)
  return int64_data_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
TensorProto::mutable_int64_data() {
  // @@protoc_insertion_point(field_mutable_list:onnx.TensorProto.int64_data)
  return &int64_data_;
}

// optional string name = 8;
inline bool TensorProto::has_name() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void TensorProto::set_has_name() {
  _has_bits_[0] |= 0x00000080u;
}
inline void TensorProto::clear_has_name() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void TensorProto::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& TensorProto::name() const {
  // @@protoc_insertion_point(field_get:onnx.TensorProto.name)
  return *name_;
}
inline void TensorProto::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:onnx.TensorProto.name)
}
inline void TensorProto::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:onnx.TensorProto.name)
}
inline void TensorProto::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:onnx.TensorProto.name)
}
inline ::std::string* TensorProto::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:onnx.TensorProto.name)
  return name_;
}
inline ::std::string* TensorProto::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TensorProto::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:onnx.TensorProto.name)
}

// optional string doc_string = 12;
inline bool TensorProto::has_doc_string() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void TensorProto::set_has_doc_string() {
  _has_bits_[0] |= 0x00000100u;
}
inline void TensorProto::clear_has_doc_string() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void TensorProto::clear_doc_string() {
  if (doc_string_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    doc_string_->clear();
  }
  clear_has_doc_string();
}
inline const ::std::string& TensorProto::doc_string() const {
  // @@protoc_insertion_point(field_get:onnx.TensorProto.doc_string)
  return *doc_string_;
}
inline void TensorProto::set_doc_string(const ::std::string& value) {
  set_has_doc_string();
  if (doc_string_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    doc_string_ = new ::std::string;
  }
  doc_string_->assign(value);
  // @@protoc_insertion_point(field_set:onnx.TensorProto.doc_string)
}
inline void TensorProto::set_doc_string(const char* value) {
  set_has_doc_string();
  if (doc_string_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    doc_string_ = new ::std::string;
  }
  doc_string_->assign(value);
  // @@protoc_insertion_point(field_set_char:onnx.TensorProto.doc_string)
}
inline void TensorProto::set_doc_string(const char* value, size_t size) {
  set_has_doc_string();
  if (doc_string_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    doc_string_ = new ::std::string;
  }
  doc_string_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:onnx.TensorProto.doc_string)
}
inline ::std::string* TensorProto::mutable_doc_string() {
  set_has_doc_string();
  if (doc_string_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    doc_string_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:onnx.TensorProto.doc_string)
  return doc_string_;
}
inline ::std::string* TensorProto::release_doc_string() {
  clear_has_doc_string();
  if (doc_string_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = doc_string_;
    doc_string_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TensorProto::set_allocated_doc_string(::std::string* doc_string) {
  if (doc_string_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete doc_string_;
  }
  if (doc_string) {
    set_has_doc_string();
    doc_string_ = doc_string;
  } else {
    clear_has_doc_string();
    doc_string_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:onnx.TensorProto.doc_string)
}

// optional bytes raw_data = 9;
inline bool TensorProto::has_raw_data() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void TensorProto::set_has_raw_data() {
  _has_bits_[0] |= 0x00000200u;
}
inline void TensorProto::clear_has_raw_data() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void TensorProto::clear_raw_data() {
  if (raw_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    raw_data_->clear();
  }
  clear_has_raw_data();
}
inline const ::std::string& TensorProto::raw_data() const {
  // @@protoc_insertion_point(field_get:onnx.TensorProto.raw_data)
  return *raw_data_;
}
inline void TensorProto::set_raw_data(const ::std::string& value) {
  set_has_raw_data();
  if (raw_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    raw_data_ = new ::std::string;
  }
  raw_data_->assign(value);
  // @@protoc_insertion_point(field_set:onnx.TensorProto.raw_data)
}
inline void TensorProto::set_raw_data(const char* value) {
  set_has_raw_data();
  if (raw_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    raw_data_ = new ::std::string;
  }
  raw_data_->assign(value);
  // @@protoc_insertion_point(field_set_char:onnx.TensorProto.raw_data)
}
inline void TensorProto::set_raw_data(const void* value, size_t size) {
  set_has_raw_data();
  if (raw_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    raw_data_ = new ::std::string;
  }
  raw_data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:onnx.TensorProto.raw_data)
}
inline ::std::string* TensorProto::mutable_raw_data() {
  set_has_raw_data();
  if (raw_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    raw_data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:onnx.TensorProto.raw_data)
  return raw_data_;
}
inline ::std::string* TensorProto::release_raw_data() {
  clear_has_raw_data();
  if (raw_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = raw_data_;
    raw_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TensorProto::set_allocated_raw_data(::std::string* raw_data) {
  if (raw_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete raw_data_;
  }
  if (raw_data) {
    set_has_raw_data();
    raw_data_ = raw_data;
  } else {
    clear_has_raw_data();
    raw_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:onnx.TensorProto.raw_data)
}

// repeated .onnx.StringStringEntryProto external_data = 13;
inline int TensorProto::external_data_size() const {
  return external_data_.size();
}
inline void TensorProto::clear_external_data() {
  external_data_.Clear();
}
inline const ::onnx::StringStringEntryProto& TensorProto::external_data(int index) const {
  // @@protoc_insertion_point(field_get:onnx.TensorProto.external_data)
  return external_data_.Get(index);
}
inline ::onnx::StringStringEntryProto* TensorProto::mutable_external_data(int index) {
  // @@protoc_insertion_point(field_mutable:onnx.TensorProto.external_data)
  return external_data_.Mutable(index);
}
inline ::onnx::StringStringEntryProto* TensorProto::add_external_data() {
  // @@protoc_insertion_point(field_add:onnx.TensorProto.external_data)
  return external_data_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::onnx::StringStringEntryProto >&
TensorProto::external_data() const {
  // @@protoc_insertion_point(field_list:onnx.TensorProto.external_data)
  return external_data_;
}
inline ::google::protobuf::RepeatedPtrField< ::onnx::StringStringEntryProto >*
TensorProto::mutable_external_data() {
  // @@protoc_insertion_point(field_mutable_list:onnx.TensorProto.external_data)
  return &external_data_;
}

// optional .onnx.TensorProto.DataLocation data_location = 14;
inline bool TensorProto::has_data_location() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void TensorProto::set_has_data_location() {
  _has_bits_[0] |= 0x00000800u;
}
inline void TensorProto::clear_has_data_location() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void TensorProto::clear_data_location() {
  data_location_ = 0;
  clear_has_data_location();
}
inline ::onnx::TensorProto_DataLocation TensorProto::data_location() const {
  // @@protoc_insertion_point(field_get:onnx.TensorProto.data_location)
  return static_cast< ::onnx::TensorProto_DataLocation >(data_location_);
}
inline void TensorProto::set_data_location(::onnx::TensorProto_DataLocation value) {
  assert(::onnx::TensorProto_DataLocation_IsValid(value));
  set_has_data_location();
  data_location_ = value;
  // @@protoc_insertion_point(field_set:onnx.TensorProto.data_location)
}

// repeated double double_data = 10 [packed = true];
inline int TensorProto::double_data_size() const {
  return double_data_.size();
}
inline void TensorProto::clear_double_data() {
  double_data_.Clear();
}
inline double TensorProto::double_data(int index) const {
  // @@protoc_insertion_point(field_get:onnx.TensorProto.double_data)
  return double_data_.Get(index);
}
inline void TensorProto::set_double_data(int index, double value) {
  double_data_.Set(index, value);
  // @@protoc_insertion_point(field_set:onnx.TensorProto.double_data)
}
inline void TensorProto::add_double_data(double value) {
  double_data_.Add(value);
  // @@protoc_insertion_point(field_add:onnx.TensorProto.double_data)
}
inline const ::google::protobuf::RepeatedField< double >&
TensorProto::double_data() const {
  // @@protoc_insertion_point(field_list:onnx.TensorProto.double_data)
  return double_data_;
}
inline ::google::protobuf::RepeatedField< double >*
TensorProto::mutable_double_data() {
  // @@protoc_insertion_point(field_mutable_list:onnx.TensorProto.double_data)
  return &double_data_;
}

// repeated uint64 uint64_data = 11 [packed = true];
inline int TensorProto::uint64_data_size() const {
  return uint64_data_.size();
}
inline void TensorProto::clear_uint64_data() {
  uint64_data_.Clear();
}
inline ::google::protobuf::uint64 TensorProto::uint64_data(int index) const {
  // @@protoc_insertion_point(field_get:onnx.TensorProto.uint64_data)
  return uint64_data_.Get(index);
}
inline void TensorProto::set_uint64_data(int index, ::google::protobuf::uint64 value) {
  uint64_data_.Set(index, value);
  // @@protoc_insertion_point(field_set:onnx.TensorProto.uint64_data)
}
inline void TensorProto::add_uint64_data(::google::protobuf::uint64 value) {
  uint64_data_.Add(value);
  // @@protoc_insertion_point(field_add:onnx.TensorProto.uint64_data)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
TensorProto::uint64_data() const {
  // @@protoc_insertion_point(field_list:onnx.TensorProto.uint64_data)
  return uint64_data_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
TensorProto::mutable_uint64_data() {
  // @@protoc_insertion_point(field_mutable_list:onnx.TensorProto.uint64_data)
  return &uint64_data_;
}

// -------------------------------------------------------------------

// TensorShapeProto_Dimension

// optional int64 dim_value = 1;
inline bool TensorShapeProto_Dimension::has_dim_value() const {
  return value_case() == kDimValue;
}
inline void TensorShapeProto_Dimension::set_has_dim_value() {
  _oneof_case_[0] = kDimValue;
}
inline void TensorShapeProto_Dimension::clear_dim_value() {
  if (has_dim_value()) {
    value_.dim_value_ = GOOGLE_LONGLONG(0);
    clear_has_value();
  }
}
inline ::google::protobuf::int64 TensorShapeProto_Dimension::dim_value() const {
  if (has_dim_value()) {
    return value_.dim_value_;
  }
  return GOOGLE_LONGLONG(0);
}
inline void TensorShapeProto_Dimension::set_dim_value(::google::protobuf::int64 value) {
  if (!has_dim_value()) {
    clear_value();
    set_has_dim_value();
  }
  value_.dim_value_ = value;
}

// optional string dim_param = 2;
inline bool TensorShapeProto_Dimension::has_dim_param() const {
  return value_case() == kDimParam;
}
inline void TensorShapeProto_Dimension::set_has_dim_param() {
  _oneof_case_[0] = kDimParam;
}
inline void TensorShapeProto_Dimension::clear_dim_param() {
  if (has_dim_param()) {
    delete value_.dim_param_;
    clear_has_value();
  }
}
inline const ::std::string& TensorShapeProto_Dimension::dim_param() const {
  if (has_dim_param()) {
    return *value_.dim_param_;
  }
  return ::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void TensorShapeProto_Dimension::set_dim_param(const ::std::string& value) {
  if (!has_dim_param()) {
    clear_value();
    set_has_dim_param();
    value_.dim_param_ = new ::std::string;
  }
  value_.dim_param_->assign(value);
}
inline void TensorShapeProto_Dimension::set_dim_param(const char* value) {
  if (!has_dim_param()) {
    clear_value();
    set_has_dim_param();
    value_.dim_param_ = new ::std::string;
  }
  value_.dim_param_->assign(value);
}
inline void TensorShapeProto_Dimension::set_dim_param(const char* value, size_t size) {
  if (!has_dim_param()) {
    clear_value();
    set_has_dim_param();
    value_.dim_param_ = new ::std::string;
  }
  value_.dim_param_->assign(
      reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TensorShapeProto_Dimension::mutable_dim_param() {
  if (!has_dim_param()) {
    clear_value();
    set_has_dim_param();
    value_.dim_param_ = new ::std::string;
  }
  return value_.dim_param_;
}
inline ::std::string* TensorShapeProto_Dimension::release_dim_param() {
  if (has_dim_param()) {
    clear_has_value();
    ::std::string* temp = value_.dim_param_;
    value_.dim_param_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void TensorShapeProto_Dimension::set_allocated_dim_param(::std::string* dim_param) {
  clear_value();
  if (dim_param) {
    set_has_dim_param();
    value_.dim_param_ = dim_param;
  }
}

// optional string denotation = 3;
inline bool TensorShapeProto_Dimension::has_denotation() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TensorShapeProto_Dimension::set_has_denotation() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TensorShapeProto_Dimension::clear_has_denotation() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TensorShapeProto_Dimension::clear_denotation() {
  if (denotation_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    denotation_->clear();
  }
  clear_has_denotation();
}
inline const ::std::string& TensorShapeProto_Dimension::denotation() const {
  // @@protoc_insertion_point(field_get:onnx.TensorShapeProto.Dimension.denotation)
  return *denotation_;
}
inline void TensorShapeProto_Dimension::set_denotation(const ::std::string& value) {
  set_has_denotation();
  if (denotation_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    denotation_ = new ::std::string;
  }
  denotation_->assign(value);
  // @@protoc_insertion_point(field_set:onnx.TensorShapeProto.Dimension.denotation)
}
inline void TensorShapeProto_Dimension::set_denotation(const char* value) {
  set_has_denotation();
  if (denotation_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    denotation_ = new ::std::string;
  }
  denotation_->assign(value);
  // @@protoc_insertion_point(field_set_char:onnx.TensorShapeProto.Dimension.denotation)
}
inline void TensorShapeProto_Dimension::set_denotation(const char* value, size_t size) {
  set_has_denotation();
  if (denotation_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    denotation_ = new ::std::string;
  }
  denotation_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:onnx.TensorShapeProto.Dimension.denotation)
}
inline ::std::string* TensorShapeProto_Dimension::mutable_denotation() {
  set_has_denotation();
  if (denotation_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    denotation_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:onnx.TensorShapeProto.Dimension.denotation)
  return denotation_;
}
inline ::std::string* TensorShapeProto_Dimension::release_denotation() {
  clear_has_denotation();
  if (denotation_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = denotation_;
    denotation_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TensorShapeProto_Dimension::set_allocated_denotation(::std::string* denotation) {
  if (denotation_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete denotation_;
  }
  if (denotation) {
    set_has_denotation();
    denotation_ = denotation;
  } else {
    clear_has_denotation();
    denotation_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:onnx.TensorShapeProto.Dimension.denotation)
}

inline bool TensorShapeProto_Dimension::has_value() {
  return value_case() != VALUE_NOT_SET;
}
inline void TensorShapeProto_Dimension::clear_has_value() {
  _oneof_case_[0] = VALUE_NOT_SET;
}
inline TensorShapeProto_Dimension::ValueCase TensorShapeProto_Dimension::value_case() const {
  return TensorShapeProto_Dimension::ValueCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// TensorShapeProto

// repeated .onnx.TensorShapeProto.Dimension dim = 1;
inline int TensorShapeProto::dim_size() const {
  return dim_.size();
}
inline void TensorShapeProto::clear_dim() {
  dim_.Clear();
}
inline const ::onnx::TensorShapeProto_Dimension& TensorShapeProto::dim(int index) const {
  // @@protoc_insertion_point(field_get:onnx.TensorShapeProto.dim)
  return dim_.Get(index);
}
inline ::onnx::TensorShapeProto_Dimension* TensorShapeProto::mutable_dim(int index) {
  // @@protoc_insertion_point(field_mutable:onnx.TensorShapeProto.dim)
  return dim_.Mutable(index);
}
inline ::onnx::TensorShapeProto_Dimension* TensorShapeProto::add_dim() {
  // @@protoc_insertion_point(field_add:onnx.TensorShapeProto.dim)
  return dim_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::onnx::TensorShapeProto_Dimension >&
TensorShapeProto::dim() const {
  // @@protoc_insertion_point(field_list:onnx.TensorShapeProto.dim)
  return dim_;
}
inline ::google::protobuf::RepeatedPtrField< ::onnx::TensorShapeProto_Dimension >*
TensorShapeProto::mutable_dim() {
  // @@protoc_insertion_point(field_mutable_list:onnx.TensorShapeProto.dim)
  return &dim_;
}

// -------------------------------------------------------------------

// TypeProto_Tensor

// optional int32 elem_type = 1;
inline bool TypeProto_Tensor::has_elem_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TypeProto_Tensor::set_has_elem_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TypeProto_Tensor::clear_has_elem_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TypeProto_Tensor::clear_elem_type() {
  elem_type_ = 0;
  clear_has_elem_type();
}
inline ::google::protobuf::int32 TypeProto_Tensor::elem_type() const {
  // @@protoc_insertion_point(field_get:onnx.TypeProto.Tensor.elem_type)
  return elem_type_;
}
inline void TypeProto_Tensor::set_elem_type(::google::protobuf::int32 value) {
  set_has_elem_type();
  elem_type_ = value;
  // @@protoc_insertion_point(field_set:onnx.TypeProto.Tensor.elem_type)
}

// optional .onnx.TensorShapeProto shape = 2;
inline bool TypeProto_Tensor::has_shape() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TypeProto_Tensor::set_has_shape() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TypeProto_Tensor::clear_has_shape() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TypeProto_Tensor::clear_shape() {
  if (shape_ != NULL) shape_->::onnx::TensorShapeProto::Clear();
  clear_has_shape();
}
inline const ::onnx::TensorShapeProto& TypeProto_Tensor::shape() const {
  // @@protoc_insertion_point(field_get:onnx.TypeProto.Tensor.shape)
  return shape_ != NULL ? *shape_ : *default_instance_->shape_;
}
inline ::onnx::TensorShapeProto* TypeProto_Tensor::mutable_shape() {
  set_has_shape();
  if (shape_ == NULL) shape_ = new ::onnx::TensorShapeProto;
  // @@protoc_insertion_point(field_mutable:onnx.TypeProto.Tensor.shape)
  return shape_;
}
inline ::onnx::TensorShapeProto* TypeProto_Tensor::release_shape() {
  clear_has_shape();
  ::onnx::TensorShapeProto* temp = shape_;
  shape_ = NULL;
  return temp;
}
inline void TypeProto_Tensor::set_allocated_shape(::onnx::TensorShapeProto* shape) {
  delete shape_;
  shape_ = shape;
  if (shape) {
    set_has_shape();
  } else {
    clear_has_shape();
  }
  // @@protoc_insertion_point(field_set_allocated:onnx.TypeProto.Tensor.shape)
}

// -------------------------------------------------------------------

// TypeProto

// optional .onnx.TypeProto.Tensor tensor_type = 1;
inline bool TypeProto::has_tensor_type() const {
  return value_case() == kTensorType;
}
inline void TypeProto::set_has_tensor_type() {
  _oneof_case_[0] = kTensorType;
}
inline void TypeProto::clear_tensor_type() {
  if (has_tensor_type()) {
    delete value_.tensor_type_;
    clear_has_value();
  }
}
inline const ::onnx::TypeProto_Tensor& TypeProto::tensor_type() const {
  return has_tensor_type() ? *value_.tensor_type_
                      : ::onnx::TypeProto_Tensor::default_instance();
}
inline ::onnx::TypeProto_Tensor* TypeProto::mutable_tensor_type() {
  if (!has_tensor_type()) {
    clear_value();
    set_has_tensor_type();
    value_.tensor_type_ = new ::onnx::TypeProto_Tensor;
  }
  return value_.tensor_type_;
}
inline ::onnx::TypeProto_Tensor* TypeProto::release_tensor_type() {
  if (has_tensor_type()) {
    clear_has_value();
    ::onnx::TypeProto_Tensor* temp = value_.tensor_type_;
    value_.tensor_type_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void TypeProto::set_allocated_tensor_type(::onnx::TypeProto_Tensor* tensor_type) {
  clear_value();
  if (tensor_type) {
    set_has_tensor_type();
    value_.tensor_type_ = tensor_type;
  }
}

// optional string denotation = 6;
inline bool TypeProto::has_denotation() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TypeProto::set_has_denotation() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TypeProto::clear_has_denotation() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TypeProto::clear_denotation() {
  if (denotation_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    denotation_->clear();
  }
  clear_has_denotation();
}
inline const ::std::string& TypeProto::denotation() const {
  // @@protoc_insertion_point(field_get:onnx.TypeProto.denotation)
  return *denotation_;
}
inline void TypeProto::set_denotation(const ::std::string& value) {
  set_has_denotation();
  if (denotation_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    denotation_ = new ::std::string;
  }
  denotation_->assign(value);
  // @@protoc_insertion_point(field_set:onnx.TypeProto.denotation)
}
inline void TypeProto::set_denotation(const char* value) {
  set_has_denotation();
  if (denotation_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    denotation_ = new ::std::string;
  }
  denotation_->assign(value);
  // @@protoc_insertion_point(field_set_char:onnx.TypeProto.denotation)
}
inline void TypeProto::set_denotation(const char* value, size_t size) {
  set_has_denotation();
  if (denotation_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    denotation_ = new ::std::string;
  }
  denotation_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:onnx.TypeProto.denotation)
}
inline ::std::string* TypeProto::mutable_denotation() {
  set_has_denotation();
  if (denotation_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    denotation_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:onnx.TypeProto.denotation)
  return denotation_;
}
inline ::std::string* TypeProto::release_denotation() {
  clear_has_denotation();
  if (denotation_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = denotation_;
    denotation_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TypeProto::set_allocated_denotation(::std::string* denotation) {
  if (denotation_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete denotation_;
  }
  if (denotation) {
    set_has_denotation();
    denotation_ = denotation;
  } else {
    clear_has_denotation();
    denotation_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:onnx.TypeProto.denotation)
}

inline bool TypeProto::has_value() {
  return value_case() != VALUE_NOT_SET;
}
inline void TypeProto::clear_has_value() {
  _oneof_case_[0] = VALUE_NOT_SET;
}
inline TypeProto::ValueCase TypeProto::value_case() const {
  return TypeProto::ValueCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// OperatorSetIdProto

// optional string domain = 1;
inline bool OperatorSetIdProto::has_domain() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OperatorSetIdProto::set_has_domain() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OperatorSetIdProto::clear_has_domain() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OperatorSetIdProto::clear_domain() {
  if (domain_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domain_->clear();
  }
  clear_has_domain();
}
inline const ::std::string& OperatorSetIdProto::domain() const {
  // @@protoc_insertion_point(field_get:onnx.OperatorSetIdProto.domain)
  return *domain_;
}
inline void OperatorSetIdProto::set_domain(const ::std::string& value) {
  set_has_domain();
  if (domain_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domain_ = new ::std::string;
  }
  domain_->assign(value);
  // @@protoc_insertion_point(field_set:onnx.OperatorSetIdProto.domain)
}
inline void OperatorSetIdProto::set_domain(const char* value) {
  set_has_domain();
  if (domain_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domain_ = new ::std::string;
  }
  domain_->assign(value);
  // @@protoc_insertion_point(field_set_char:onnx.OperatorSetIdProto.domain)
}
inline void OperatorSetIdProto::set_domain(const char* value, size_t size) {
  set_has_domain();
  if (domain_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domain_ = new ::std::string;
  }
  domain_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:onnx.OperatorSetIdProto.domain)
}
inline ::std::string* OperatorSetIdProto::mutable_domain() {
  set_has_domain();
  if (domain_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domain_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:onnx.OperatorSetIdProto.domain)
  return domain_;
}
inline ::std::string* OperatorSetIdProto::release_domain() {
  clear_has_domain();
  if (domain_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = domain_;
    domain_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void OperatorSetIdProto::set_allocated_domain(::std::string* domain) {
  if (domain_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete domain_;
  }
  if (domain) {
    set_has_domain();
    domain_ = domain;
  } else {
    clear_has_domain();
    domain_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:onnx.OperatorSetIdProto.domain)
}

// optional int64 version = 2;
inline bool OperatorSetIdProto::has_version() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OperatorSetIdProto::set_has_version() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OperatorSetIdProto::clear_has_version() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OperatorSetIdProto::clear_version() {
  version_ = GOOGLE_LONGLONG(0);
  clear_has_version();
}
inline ::google::protobuf::int64 OperatorSetIdProto::version() const {
  // @@protoc_insertion_point(field_get:onnx.OperatorSetIdProto.version)
  return version_;
}
inline void OperatorSetIdProto::set_version(::google::protobuf::int64 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:onnx.OperatorSetIdProto.version)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace onnx

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::onnx::AttributeProto_AttributeType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::onnx::AttributeProto_AttributeType>() {
  return ::onnx::AttributeProto_AttributeType_descriptor();
}
template <> struct is_proto_enum< ::onnx::TensorProto_DataType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::onnx::TensorProto_DataType>() {
  return ::onnx::TensorProto_DataType_descriptor();
}
template <> struct is_proto_enum< ::onnx::TensorProto_DataLocation> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::onnx::TensorProto_DataLocation>() {
  return ::onnx::TensorProto_DataLocation_descriptor();
}
template <> struct is_proto_enum< ::onnx::Version> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::onnx::Version>() {
  return ::onnx::Version_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_onnx_2eproto__INCLUDED
